// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: factable.proto

package factable

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import protocol "github.com/LiveRamp/gazette/v2/pkg/protocol"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/duration"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"
import github_com_LiveRamp_gazette_v2_pkg_consumer "github.com/LiveRamp/gazette/v2/pkg/consumer"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"
import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DimensionType int32

const (
	DimensionType_INVALID_DIM_TYPE DimensionType = 0
	DimensionType_VARINT           DimensionType = 1
	DimensionType_FLOAT            DimensionType = 3
	DimensionType_STRING           DimensionType = 4
	DimensionType_TIMESTAMP        DimensionType = 5
)

var DimensionType_name = map[int32]string{
	0: "INVALID_DIM_TYPE",
	1: "VARINT",
	3: "FLOAT",
	4: "STRING",
	5: "TIMESTAMP",
}
var DimensionType_value = map[string]int32{
	"INVALID_DIM_TYPE": 0,
	"VARINT":           1,
	"FLOAT":            3,
	"STRING":           4,
	"TIMESTAMP":        5,
}

func (x DimensionType) String() string {
	return proto.EnumName(DimensionType_name, int32(x))
}
func (DimensionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{0}
}

type MetricType int32

const (
	MetricType_INVALID_METRIC_TYPE MetricType = 0
	MetricType_VARINT_SUM          MetricType = 1
	MetricType_VARINT_GAUGE        MetricType = 2
	MetricType_FLOAT_SUM           MetricType = 3
	MetricType_STRING_HLL          MetricType = 4
)

var MetricType_name = map[int32]string{
	0: "INVALID_METRIC_TYPE",
	1: "VARINT_SUM",
	2: "VARINT_GAUGE",
	3: "FLOAT_SUM",
	4: "STRING_HLL",
}
var MetricType_value = map[string]int32{
	"INVALID_METRIC_TYPE": 0,
	"VARINT_SUM":          1,
	"VARINT_GAUGE":        2,
	"FLOAT_SUM":           3,
	"STRING_HLL":          4,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{1}
}

// MappingSpec defines a Mapping of input Messages to InputRecords. In many
// cases, Relations will opt to use an identity Mapping. For events having
// de-normalized & nested event structures, Mappings provide a means to
// "unpack" into multiple normalized RelationRows. For example a "purchase"
// event having several product SKUs might map to a RelationRow{purchase, SKU}
// tuple for each purchased product.
type MappingSpec struct {
	// Short, unique name of the Mapping.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Longer, free-form description of the Mapping.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// Unique tag of the Mapping.
	Tag MapTag `protobuf:"varint,3,opt,name=tag,proto3,casttype=MapTag" json:"tag,omitempty"`
}

func (m *MappingSpec) Reset()         { *m = MappingSpec{} }
func (m *MappingSpec) String() string { return proto.CompactTextString(m) }
func (*MappingSpec) ProtoMessage()    {}
func (*MappingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{0}
}
func (m *MappingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MappingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MappingSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MappingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MappingSpec.Merge(dst, src)
}
func (m *MappingSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MappingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MappingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MappingSpec proto.InternalMessageInfo

// DimensionSpec defines a Dimension which may be extracted from a RelationRow.
type DimensionSpec struct {
	// Short, unique name of the Dimension.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the Dimension. Immutable.
	Type DimensionType `protobuf:"varint,2,opt,name=type,proto3,enum=factable.DimensionType" json:"type,omitempty"`
	// Longer, free-form description of the Dimension.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// Unique tag of the dimension.
	Tag DimTag `protobuf:"varint,4,opt,name=tag,proto3,casttype=DimTag" json:"tag,omitempty"`
}

func (m *DimensionSpec) Reset()         { *m = DimensionSpec{} }
func (m *DimensionSpec) String() string { return proto.CompactTextString(m) }
func (*DimensionSpec) ProtoMessage()    {}
func (*DimensionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{1}
}
func (m *DimensionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DimensionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DimensionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DimensionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DimensionSpec.Merge(dst, src)
}
func (m *DimensionSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DimensionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DimensionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DimensionSpec proto.InternalMessageInfo

// MetricSpec defines a Metric which may be derived from a specified Dimension.
type MetricSpec struct {
	// Short, unique name of the Metric.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Dimension from which the Metric is extracted.
	Dimension string `protobuf:"bytes,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
	// Type of the Metric. Immutable.
	Type MetricType `protobuf:"varint,3,opt,name=type,proto3,enum=factable.MetricType" json:"type,omitempty"`
	// Longer, free-form description of the Metric.
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// Unique tag of the Metric.
	Tag MetTag `protobuf:"varint,5,opt,name=tag,proto3,casttype=MetTag" json:"tag,omitempty"`
	// Resolved DimTag of |dimension|. Immutable.
	DimTag DimTag `protobuf:"varint,6,opt,name=dim_tag,json=dimTag,proto3,casttype=DimTag" json:"dim_tag,omitempty" yaml:",omitempty"`
}

func (m *MetricSpec) Reset()         { *m = MetricSpec{} }
func (m *MetricSpec) String() string { return proto.CompactTextString(m) }
func (*MetricSpec) ProtoMessage()    {}
func (*MetricSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{2}
}
func (m *MetricSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MetricSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricSpec.Merge(dst, src)
}
func (m *MetricSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MetricSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MetricSpec proto.InternalMessageInfo

// RelationSpec composes a journal LabelSelector, which defines a collection of
// input events, with a mapping that transforms each event into one or more
// RelationRows.
type RelationSpec struct {
	// Short, unique name of the Relation.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// LabelSelector identifies journals which, taken together, compose the "rows" of the Relation.
	Selector protocol.LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector"`
	// Mapping which transforms journal events into Relation rows.
	Mapping string `protobuf:"bytes,3,opt,name=mapping,proto3" json:"mapping,omitempty"`
	// Dimensions of the Relation. Dimensions may be added and removed over time,
	// but all Dimensions or derived Metrics of current MaterializedViewSpecs must
	// refer to current Dimensions of the RelationSpec.
	Dimensions []string `protobuf:"bytes,4,rep,name=dimensions" json:"dimensions,omitempty"`
	// Longer, free-form description of the Relation.
	Desc string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	// Unique tag of the Relation.
	Tag RelTag `protobuf:"varint,6,opt,name=tag,proto3,casttype=RelTag" json:"tag,omitempty"`
	// Resolved MapTag of |mapping|. Immutable.
	MapTag MapTag `protobuf:"varint,7,opt,name=map_tag,json=mapTag,proto3,casttype=MapTag" json:"map_tag,omitempty" yaml:",omitempty"`
	// Resolved DimTags of |dimensions|. Immutable.
	DimTags []DimTag `protobuf:"varint,8,rep,packed,name=dim_tags,json=dimTags,casttype=DimTag" json:"dim_tags,omitempty" yaml:",omitempty"`
}

func (m *RelationSpec) Reset()         { *m = RelationSpec{} }
func (m *RelationSpec) String() string { return proto.CompactTextString(m) }
func (*RelationSpec) ProtoMessage()    {}
func (*RelationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{3}
}
func (m *RelationSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RelationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationSpec.Merge(dst, src)
}
func (m *RelationSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RelationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RelationSpec proto.InternalMessageInfo

// ViewSpec defines a summarized view over a Relation, composing a subset of
// Relation dimensions with a set of derived Metrics.
type ViewSpec struct {
	// Ordered Dimensions summarized by the ViewSpec.
	Dimensions []string `protobuf:"bytes,1,rep,name=dimensions" json:"dimensions,omitempty"`
	// Ordered Metrics aggregated by the ViewSpec.
	Metrics []string `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *ViewSpec) Reset()         { *m = ViewSpec{} }
func (m *ViewSpec) String() string { return proto.CompactTextString(m) }
func (*ViewSpec) ProtoMessage()    {}
func (*ViewSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{4}
}
func (m *ViewSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ViewSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewSpec.Merge(dst, src)
}
func (m *ViewSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ViewSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ViewSpec proto.InternalMessageInfo

type ResolvedView struct {
	// Resolved DimTags of ViewSpec Dimensions.
	DimTags []DimTag `protobuf:"varint,1,rep,packed,name=dim_tags,json=dimTags,casttype=DimTag" json:"dim_tags,omitempty"`
	// Resolved MetTags of ViewSpec Metrics.
	MetTags []MetTag `protobuf:"varint,2,rep,packed,name=met_tags,json=metTags,casttype=MetTag" json:"met_tags,omitempty"`
}

func (m *ResolvedView) Reset()         { *m = ResolvedView{} }
func (m *ResolvedView) String() string { return proto.CompactTextString(m) }
func (*ResolvedView) ProtoMessage()    {}
func (*ResolvedView) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{5}
}
func (m *ResolvedView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResolvedView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedView.Merge(dst, src)
}
func (m *ResolvedView) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ResolvedView) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedView.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedView proto.InternalMessageInfo

// ReservedMVTagSpec defines MVTags that cannot be used in this schema. This
// can be used to reserve tags for future materialized views or to tombstone
// deleted materialized views. Re-using materialized view tags requires careful
// consideration of previously used delta journals and shard recovery logs
// because the tag is an input for generating shard IDs in `factctl sync`.
type ReservedMVTagSpec struct {
	// Reserved tag in the same space as MaterializedView.
	Tag MVTag `protobuf:"varint,1,opt,name=tag,proto3,casttype=MVTag" json:"tag,omitempty"`
	// Longer, free-form description of the reserved MVTag.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *ReservedMVTagSpec) Reset()         { *m = ReservedMVTagSpec{} }
func (m *ReservedMVTagSpec) String() string { return proto.CompactTextString(m) }
func (*ReservedMVTagSpec) ProtoMessage()    {}
func (*ReservedMVTagSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{6}
}
func (m *ReservedMVTagSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReservedMVTagSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReservedMVTagSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ReservedMVTagSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservedMVTagSpec.Merge(dst, src)
}
func (m *ReservedMVTagSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReservedMVTagSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservedMVTagSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ReservedMVTagSpec proto.InternalMessageInfo

// MaterializedViewSpec defines a materialization of a ViewSpec. Its Metrics
// are continuously aggregated as RelationRows are processed, and the total
// storage commitment is limited to the cardinality of the View Dimensions.
type MaterializedViewSpec struct {
	// Short, unique name of the MaterializedView.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Relation which this view materializes.
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	// View materialized by the MaterializedView.
	View ViewSpec `protobuf:"bytes,3,opt,name=view" json:"view"`
	// Longer, free-form description of the MaterializedView.
	Desc      string                          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Retention *MaterializedViewSpec_Retention `protobuf:"bytes,5,opt,name=retention" json:"retention,omitempty"`
	// Unique tag of the MaterializedView.
	Tag MVTag `protobuf:"varint,6,opt,name=tag,proto3,casttype=MVTag" json:"tag,omitempty"`
	// Resolved RelTag. Immutable.
	RelTag RelTag `protobuf:"varint,7,opt,name=rel_tag,json=relTag,proto3,casttype=RelTag" json:"rel_tag,omitempty" yaml:",omitempty"`
	// Resolution of the View. Immutable.
	ResolvedView ResolvedView `protobuf:"bytes,8,opt,name=resolved_view,json=resolvedView" json:"resolved_view" yaml:",omitempty"`
}

func (m *MaterializedViewSpec) Reset()         { *m = MaterializedViewSpec{} }
func (m *MaterializedViewSpec) String() string { return proto.CompactTextString(m) }
func (*MaterializedViewSpec) ProtoMessage()    {}
func (*MaterializedViewSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{7}
}
func (m *MaterializedViewSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaterializedViewSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaterializedViewSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MaterializedViewSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterializedViewSpec.Merge(dst, src)
}
func (m *MaterializedViewSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MaterializedViewSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterializedViewSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MaterializedViewSpec proto.InternalMessageInfo

// Optional retention of MaterializedView rows.
type MaterializedViewSpec_Retention struct {
	// Duration after which a row is eligible for removal.
	RemoveAfter time.Duration `protobuf:"bytes,1,opt,name=remove_after,json=removeAfter,stdduration" json:"remove_after"`
	// Dimension, which must be part of the MaterializedView and of type
	// Timestamp, to which |remove_after| is added to determine the effective
	// removal horizon.
	RelativeTo string `protobuf:"bytes,2,opt,name=relative_to,json=relativeTo,proto3" json:"relative_to,omitempty"`
	// Resolved DimTag of |relative_to|.
	RelativeToTag DimTag `protobuf:"varint,3,opt,name=relative_to_tag,json=relativeToTag,proto3,casttype=DimTag" json:"relative_to_tag,omitempty" yaml:",omitempty"`
}

func (m *MaterializedViewSpec_Retention) Reset()         { *m = MaterializedViewSpec_Retention{} }
func (m *MaterializedViewSpec_Retention) String() string { return proto.CompactTextString(m) }
func (*MaterializedViewSpec_Retention) ProtoMessage()    {}
func (*MaterializedViewSpec_Retention) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{7, 0}
}
func (m *MaterializedViewSpec_Retention) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaterializedViewSpec_Retention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaterializedViewSpec_Retention.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MaterializedViewSpec_Retention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterializedViewSpec_Retention.Merge(dst, src)
}
func (m *MaterializedViewSpec_Retention) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MaterializedViewSpec_Retention) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterializedViewSpec_Retention.DiscardUnknown(m)
}

var xxx_messageInfo_MaterializedViewSpec_Retention proto.InternalMessageInfo

// QuerySpec describes a result which should be computed from a Relation.
// In particular it defines the "shape" (in Dimensions and Metrics) of the
// desired result, and any filters which should be applied.
type QuerySpec struct {
	// MaterializedView to query.
	MaterializedView string `protobuf:"bytes,2,opt,name=materialized_view,json=materializedView,proto3" json:"materialized_view,omitempty"`
	// View of the Query result.
	//
	// Dimensions of the Relation which should be grouped over and returned with
	// the Query result set. Other Dimensions included in the MaterializedView but
	// not included in the Query Shape are aggregated across.
	//
	// Where possible, use a strict ordered prefix of underlying MaterializedView
	// Dimensions. This is much more efficient to evaluate, as grouping can
	// utilize the natural index order, and no further recombining or sorting is
	// required. When using a prefix, the Query result set is incrementally
	// streamed as it is evaluated, and even extremely large result sets can be
	// queried efficiently.
	//
	// If Dimensions are not a strict prefix, the Query evaluator must perform
	// recombination and sorting steps, and results will be sent only after
	// all underlying view rows have been read. Implementations may also limit
	// the size of the result sets they will buffer, returning an error for
	// Queries which exceed it.
	View    ViewSpec           `protobuf:"bytes,3,opt,name=view" json:"view"`
	Filters []QuerySpec_Filter `protobuf:"bytes,4,rep,name=filters" json:"filters"`
}

func (m *QuerySpec) Reset()         { *m = QuerySpec{} }
func (m *QuerySpec) String() string { return proto.CompactTextString(m) }
func (*QuerySpec) ProtoMessage()    {}
func (*QuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{8}
}
func (m *QuerySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec.Merge(dst, src)
}
func (m *QuerySpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *QuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec proto.InternalMessageInfo

// A Filter is a sequence of ordered non-overlapping ranges for a Dimension.
// Filters may be applied to any subset of MaterializedView Dimensions,
// including those not present in the Query View.
type QuerySpec_Filter struct {
	// Dimension to which the Filter is applied.
	Dimension string                    `protobuf:"bytes,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Ints      []QuerySpec_Filter_Int    `protobuf:"bytes,2,rep,name=ints" json:"ints"`
	Floats    []QuerySpec_Filter_Float  `protobuf:"bytes,3,rep,name=floats" json:"floats"`
	Strings   []QuerySpec_Filter_String `protobuf:"bytes,4,rep,name=strings" json:"strings"`
	Times     []QuerySpec_Filter_Time   `protobuf:"bytes,5,rep,name=times" json:"times"`
}

func (m *QuerySpec_Filter) Reset()         { *m = QuerySpec_Filter{} }
func (m *QuerySpec_Filter) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter) ProtoMessage()    {}
func (*QuerySpec_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{8, 0}
}
func (m *QuerySpec_Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpec_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpec_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QuerySpec_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter.Merge(dst, src)
}
func (m *QuerySpec_Filter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *QuerySpec_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter proto.InternalMessageInfo

type QuerySpec_Filter_Int struct {
	Begin int64 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *QuerySpec_Filter_Int) Reset()         { *m = QuerySpec_Filter_Int{} }
func (m *QuerySpec_Filter_Int) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter_Int) ProtoMessage()    {}
func (*QuerySpec_Filter_Int) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{8, 0, 0}
}
func (m *QuerySpec_Filter_Int) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpec_Filter_Int) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpec_Filter_Int.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QuerySpec_Filter_Int) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter_Int.Merge(dst, src)
}
func (m *QuerySpec_Filter_Int) XXX_Size() int {
	return m.ProtoSize()
}
func (m *QuerySpec_Filter_Int) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter_Int.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter_Int proto.InternalMessageInfo

type QuerySpec_Filter_Float struct {
	Begin float64 `protobuf:"fixed64,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   float64 `protobuf:"fixed64,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *QuerySpec_Filter_Float) Reset()         { *m = QuerySpec_Filter_Float{} }
func (m *QuerySpec_Filter_Float) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter_Float) ProtoMessage()    {}
func (*QuerySpec_Filter_Float) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{8, 0, 1}
}
func (m *QuerySpec_Filter_Float) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpec_Filter_Float) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpec_Filter_Float.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QuerySpec_Filter_Float) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter_Float.Merge(dst, src)
}
func (m *QuerySpec_Filter_Float) XXX_Size() int {
	return m.ProtoSize()
}
func (m *QuerySpec_Filter_Float) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter_Float.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter_Float proto.InternalMessageInfo

type QuerySpec_Filter_String struct {
	Begin string `protobuf:"bytes,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *QuerySpec_Filter_String) Reset()         { *m = QuerySpec_Filter_String{} }
func (m *QuerySpec_Filter_String) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter_String) ProtoMessage()    {}
func (*QuerySpec_Filter_String) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{8, 0, 2}
}
func (m *QuerySpec_Filter_String) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpec_Filter_String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpec_Filter_String.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QuerySpec_Filter_String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter_String.Merge(dst, src)
}
func (m *QuerySpec_Filter_String) XXX_Size() int {
	return m.ProtoSize()
}
func (m *QuerySpec_Filter_String) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter_String.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter_String proto.InternalMessageInfo

type QuerySpec_Filter_Time struct {
	Begin         time.Time     `protobuf:"bytes,1,opt,name=begin,stdtime" json:"begin"`
	End           time.Time     `protobuf:"bytes,2,opt,name=end,stdtime" json:"end"`
	RelativeBegin time.Duration `protobuf:"bytes,3,opt,name=relative_begin,json=relativeBegin,stdduration" json:"relative_begin"`
	RelativeEnd   time.Duration `protobuf:"bytes,4,opt,name=relative_end,json=relativeEnd,stdduration" json:"relative_end"`
}

func (m *QuerySpec_Filter_Time) Reset()         { *m = QuerySpec_Filter_Time{} }
func (m *QuerySpec_Filter_Time) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter_Time) ProtoMessage()    {}
func (*QuerySpec_Filter_Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{8, 0, 3}
}
func (m *QuerySpec_Filter_Time) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpec_Filter_Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpec_Filter_Time.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QuerySpec_Filter_Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter_Time.Merge(dst, src)
}
func (m *QuerySpec_Filter_Time) XXX_Size() int {
	return m.ProtoSize()
}
func (m *QuerySpec_Filter_Time) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter_Time.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter_Time proto.InternalMessageInfo

type ResolvedQuery struct {
	// Tag of the MaterializedViewSpec to be queried.
	MvTag MVTag `protobuf:"varint,1,opt,name=mv_tag,json=mvTag,proto3,casttype=MVTag" json:"mv_tag,omitempty"`
	// Shape of the query result.
	View    ResolvedView           `protobuf:"bytes,2,opt,name=view" json:"view"`
	Filters []ResolvedQuery_Filter `protobuf:"bytes,3,rep,name=filters" json:"filters"`
}

func (m *ResolvedQuery) Reset()         { *m = ResolvedQuery{} }
func (m *ResolvedQuery) String() string { return proto.CompactTextString(m) }
func (*ResolvedQuery) ProtoMessage()    {}
func (*ResolvedQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{9}
}
func (m *ResolvedQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResolvedQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedQuery.Merge(dst, src)
}
func (m *ResolvedQuery) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ResolvedQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedQuery proto.InternalMessageInfo

// Flattened filtered ranges over each view dimension.
type ResolvedQuery_Filter struct {
	// Dimension to which the Filter is applied.
	DimTag DimTag                       `protobuf:"varint,1,opt,name=dim_tag,json=dimTag,proto3,casttype=DimTag" json:"dim_tag,omitempty"`
	Ranges []ResolvedQuery_Filter_Range `protobuf:"bytes,2,rep,name=ranges" json:"ranges"`
}

func (m *ResolvedQuery_Filter) Reset()         { *m = ResolvedQuery_Filter{} }
func (m *ResolvedQuery_Filter) String() string { return proto.CompactTextString(m) }
func (*ResolvedQuery_Filter) ProtoMessage()    {}
func (*ResolvedQuery_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{9, 0}
}
func (m *ResolvedQuery_Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedQuery_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedQuery_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResolvedQuery_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedQuery_Filter.Merge(dst, src)
}
func (m *ResolvedQuery_Filter) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ResolvedQuery_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedQuery_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedQuery_Filter proto.InternalMessageInfo

// Flattened allowed byte ranges of the Dimension.
type ResolvedQuery_Filter_Range struct {
	Begin []byte `protobuf:"bytes,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   []byte `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *ResolvedQuery_Filter_Range) Reset()         { *m = ResolvedQuery_Filter_Range{} }
func (m *ResolvedQuery_Filter_Range) String() string { return proto.CompactTextString(m) }
func (*ResolvedQuery_Filter_Range) ProtoMessage()    {}
func (*ResolvedQuery_Filter_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{9, 0, 0}
}
func (m *ResolvedQuery_Filter_Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedQuery_Filter_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedQuery_Filter_Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResolvedQuery_Filter_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedQuery_Filter_Range.Merge(dst, src)
}
func (m *ResolvedQuery_Filter_Range) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ResolvedQuery_Filter_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedQuery_Filter_Range.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedQuery_Filter_Range proto.InternalMessageInfo

type ExecuteQueryRequest struct {
	// Header attached by a proxy-ing peer. Not directly set by clients.
	Header *protocol.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Shard to query. Set iff |header| is also set.
	Shard github_com_LiveRamp_gazette_v2_pkg_consumer.ShardID `protobuf:"bytes,2,opt,name=shard,proto3,casttype=github.com/LiveRamp/gazette/v2/pkg/consumer.ShardID" json:"shard,omitempty"`
	// Query specification.
	Query ResolvedQuery `protobuf:"bytes,3,opt,name=query" json:"query"`
}

func (m *ExecuteQueryRequest) Reset()         { *m = ExecuteQueryRequest{} }
func (m *ExecuteQueryRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteQueryRequest) ProtoMessage()    {}
func (*ExecuteQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{10}
}
func (m *ExecuteQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExecuteQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteQueryRequest.Merge(dst, src)
}
func (m *ExecuteQueryRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExecuteQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteQueryRequest proto.InternalMessageInfo

type QueryResponse struct {
	// Response header. Set on the first QueryResponse only.
	Header *protocol.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Encoded table rows.
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{11}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(dst, src)
}
func (m *QueryResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

// SchemaSpec defines a set of Relations and their Mappings, Dimensions, Metrics,
// and MaterializedViews. The complete Schema must be referentially consistent:
// any Mapping, Dimension or Metric used in a Relation or MaterializedView must
// be defined. Similarly, Dimensions referenced from Metrics must be defined,
// and of the proper associated type.
type SchemaSpec struct {
	Mappings         []MappingSpec          `protobuf:"bytes,1,rep,name=mappings" json:"mappings"`
	Dimensions       []DimensionSpec        `protobuf:"bytes,2,rep,name=dimensions" json:"dimensions"`
	Metrics          []MetricSpec           `protobuf:"bytes,3,rep,name=metrics" json:"metrics"`
	Relations        []RelationSpec         `protobuf:"bytes,4,rep,name=relations" json:"relations"`
	Views            []MaterializedViewSpec `protobuf:"bytes,5,rep,name=views" json:"views"`
	ReservedViewTags []ReservedMVTagSpec    `protobuf:"bytes,6,rep,name=reserved_view_tags,json=reservedViewTags" json:"reserved_view_tags"`
}

func (m *SchemaSpec) Reset()         { *m = SchemaSpec{} }
func (m *SchemaSpec) String() string { return proto.CompactTextString(m) }
func (*SchemaSpec) ProtoMessage()    {}
func (*SchemaSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{12}
}
func (m *SchemaSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SchemaSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaSpec.Merge(dst, src)
}
func (m *SchemaSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SchemaSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaSpec proto.InternalMessageInfo

// GetSchemaResponse is the response of the GetSchema RPC.
type GetSchemaResponse struct {
	// Name of this Factable release instance.
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	// ModRevision of the current SchemaSpec
	ModRevision int64 `protobuf:"varint,1,opt,name=mod_revision,json=modRevision,proto3" json:"mod_revision,omitempty"`
	// Current value of the SchemaSpec. Zero-valued if |mod_revision| is zero.
	Spec SchemaSpec `protobuf:"bytes,2,opt,name=spec" json:"spec"`
	// LabelSelector over Extractor output / VTable input "delta" partitions.
	DeltaPartitions protocol.LabelSelector `protobuf:"bytes,4,opt,name=delta_partitions,json=deltaPartitions" json:"delta_partitions"`
}

func (m *GetSchemaResponse) Reset()         { *m = GetSchemaResponse{} }
func (m *GetSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*GetSchemaResponse) ProtoMessage()    {}
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{13}
}
func (m *GetSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSchemaResponse.Merge(dst, src)
}
func (m *GetSchemaResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSchemaResponse proto.InternalMessageInfo

// UpdateSchemaRequest is the request of the UpdateSchema RPC.
type UpdateSchemaRequest struct {
	// Expected Name of the Factable release instance.
	ExpectInstance string `protobuf:"bytes,1,opt,name=expect_instance,json=expectInstance,proto3" json:"expect_instance,omitempty"`
	// Expected ModRevision of the current SchemaSpec. Zero if the SchemaSpec
	// is being created for the first time.
	ExpectModRevision int64 `protobuf:"varint,2,opt,name=expect_mod_revision,json=expectModRevision,proto3" json:"expect_mod_revision,omitempty"`
	// Updated SchemaSpec to apply.
	Update SchemaSpec `protobuf:"bytes,3,opt,name=update" json:"update"`
}

func (m *UpdateSchemaRequest) Reset()         { *m = UpdateSchemaRequest{} }
func (m *UpdateSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSchemaRequest) ProtoMessage()    {}
func (*UpdateSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_factable_3e4e00c80e828d06, []int{14}
}
func (m *UpdateSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSchemaRequest.Merge(dst, src)
}
func (m *UpdateSchemaRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UpdateSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSchemaRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MappingSpec)(nil), "factable.MappingSpec")
	proto.RegisterType((*DimensionSpec)(nil), "factable.DimensionSpec")
	proto.RegisterType((*MetricSpec)(nil), "factable.MetricSpec")
	proto.RegisterType((*RelationSpec)(nil), "factable.RelationSpec")
	proto.RegisterType((*ViewSpec)(nil), "factable.ViewSpec")
	proto.RegisterType((*ResolvedView)(nil), "factable.ResolvedView")
	proto.RegisterType((*ReservedMVTagSpec)(nil), "factable.ReservedMVTagSpec")
	proto.RegisterType((*MaterializedViewSpec)(nil), "factable.MaterializedViewSpec")
	proto.RegisterType((*MaterializedViewSpec_Retention)(nil), "factable.MaterializedViewSpec.Retention")
	proto.RegisterType((*QuerySpec)(nil), "factable.QuerySpec")
	proto.RegisterType((*QuerySpec_Filter)(nil), "factable.QuerySpec.Filter")
	proto.RegisterType((*QuerySpec_Filter_Int)(nil), "factable.QuerySpec.Filter.Int")
	proto.RegisterType((*QuerySpec_Filter_Float)(nil), "factable.QuerySpec.Filter.Float")
	proto.RegisterType((*QuerySpec_Filter_String)(nil), "factable.QuerySpec.Filter.String")
	proto.RegisterType((*QuerySpec_Filter_Time)(nil), "factable.QuerySpec.Filter.Time")
	proto.RegisterType((*ResolvedQuery)(nil), "factable.ResolvedQuery")
	proto.RegisterType((*ResolvedQuery_Filter)(nil), "factable.ResolvedQuery.Filter")
	proto.RegisterType((*ResolvedQuery_Filter_Range)(nil), "factable.ResolvedQuery.Filter.Range")
	proto.RegisterType((*ExecuteQueryRequest)(nil), "factable.ExecuteQueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "factable.QueryResponse")
	proto.RegisterType((*SchemaSpec)(nil), "factable.SchemaSpec")
	proto.RegisterType((*GetSchemaResponse)(nil), "factable.GetSchemaResponse")
	proto.RegisterType((*UpdateSchemaRequest)(nil), "factable.UpdateSchemaRequest")
	proto.RegisterEnum("factable.DimensionType", DimensionType_name, DimensionType_value)
	proto.RegisterEnum("factable.MetricType", MetricType_name, MetricType_value)
}
func (this *ResolvedView) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResolvedView)
	if !ok {
		that2, ok := that.(ResolvedView)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ResolvedView")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ResolvedView but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ResolvedView but is not nil && this == nil")
	}
	if len(this.DimTags) != len(that1.DimTags) {
		return fmt.Errorf("DimTags this(%v) Not Equal that(%v)", len(this.DimTags), len(that1.DimTags))
	}
	for i := range this.DimTags {
		if this.DimTags[i] != that1.DimTags[i] {
			return fmt.Errorf("DimTags this[%v](%v) Not Equal that[%v](%v)", i, this.DimTags[i], i, that1.DimTags[i])
		}
	}
	if len(this.MetTags) != len(that1.MetTags) {
		return fmt.Errorf("MetTags this(%v) Not Equal that(%v)", len(this.MetTags), len(that1.MetTags))
	}
	for i := range this.MetTags {
		if this.MetTags[i] != that1.MetTags[i] {
			return fmt.Errorf("MetTags this[%v](%v) Not Equal that[%v](%v)", i, this.MetTags[i], i, that1.MetTags[i])
		}
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchemaClient is the client API for Schema service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchemaClient interface {
	// GetSchema retrieves the current SchemaSpec.
	GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	// UpdateSchema updates the SchemaSpec to a new value.
	UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type schemaClient struct {
	cc *grpc.ClientConn
}

func NewSchemaClient(cc *grpc.ClientConn) SchemaClient {
	return &schemaClient{cc}
}

func (c *schemaClient) GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/factable.Schema/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/factable.Schema/UpdateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaServer is the server API for Schema service.
type SchemaServer interface {
	// GetSchema retrieves the current SchemaSpec.
	GetSchema(context.Context, *empty.Empty) (*GetSchemaResponse, error)
	// UpdateSchema updates the SchemaSpec to a new value.
	UpdateSchema(context.Context, *UpdateSchemaRequest) (*empty.Empty, error)
}

func RegisterSchemaServer(s *grpc.Server, srv SchemaServer) {
	s.RegisterService(&_Schema_serviceDesc, srv)
}

func _Schema_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/factable.Schema/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).GetSchema(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_UpdateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).UpdateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/factable.Schema/UpdateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).UpdateSchema(ctx, req.(*UpdateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Schema_serviceDesc = grpc.ServiceDesc{
	ServiceName: "factable.Schema",
	HandlerType: (*SchemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchema",
			Handler:    _Schema_GetSchema_Handler,
		},
		{
			MethodName: "UpdateSchema",
			Handler:    _Schema_UpdateSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "factable.proto",
}

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ResolveQuery maps a QuerySpec into a validated ResolvedQuery,
	// under the current server schema.
	ResolveQuery(ctx context.Context, in *QuerySpec, opts ...grpc.CallOption) (*ResolvedQuery, error)
	// ExecuteResolvedQuery against one or all Shards.
	ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (Query_ExecuteQueryClient, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ResolveQuery(ctx context.Context, in *QuerySpec, opts ...grpc.CallOption) (*ResolvedQuery, error) {
	out := new(ResolvedQuery)
	err := c.cc.Invoke(ctx, "/factable.Query/ResolveQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (Query_ExecuteQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[0], "/factable.Query/ExecuteQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryExecuteQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_ExecuteQueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type queryExecuteQueryClient struct {
	grpc.ClientStream
}

func (x *queryExecuteQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ResolveQuery maps a QuerySpec into a validated ResolvedQuery,
	// under the current server schema.
	ResolveQuery(context.Context, *QuerySpec) (*ResolvedQuery, error)
	// ExecuteResolvedQuery against one or all Shards.
	ExecuteQuery(*ExecuteQueryRequest, Query_ExecuteQueryServer) error
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ResolveQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResolveQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/factable.Query/ResolveQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResolveQuery(ctx, req.(*QuerySpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecuteQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).ExecuteQuery(m, &queryExecuteQueryServer{stream})
}

type Query_ExecuteQueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type queryExecuteQueryServer struct {
	grpc.ServerStream
}

func (x *queryExecuteQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "factable.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveQuery",
			Handler:    _Query_ResolveQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteQuery",
			Handler:       _Query_ExecuteQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "factable.proto",
}

func (m *MappingSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MappingSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Tag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Tag))
	}
	return i, nil
}

func (m *DimensionSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DimensionSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Type))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Tag != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Tag))
	}
	return i, nil
}

func (m *MetricSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Dimension) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Dimension)))
		i += copy(dAtA[i:], m.Dimension)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Type))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Tag != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Tag))
	}
	if m.DimTag != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.DimTag))
	}
	return i, nil
}

func (m *RelationSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintFactable(dAtA, i, uint64(m.Selector.ProtoSize()))
	n1, err := m.Selector.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Mapping) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Mapping)))
		i += copy(dAtA[i:], m.Mapping)
	}
	if len(m.Dimensions) > 0 {
		for _, s := range m.Dimensions {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Tag != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Tag))
	}
	if m.MapTag != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.MapTag))
	}
	if len(m.DimTags) > 0 {
		dAtA3 := make([]byte, len(m.DimTags)*10)
		var j2 int
		for _, num := range m.DimTags {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintFactable(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *ViewSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, s := range m.Dimensions {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Metrics) > 0 {
		for _, s := range m.Metrics {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ResolvedView) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DimTags) > 0 {
		dAtA5 := make([]byte, len(m.DimTags)*10)
		var j4 int
		for _, num := range m.DimTags {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.MetTags) > 0 {
		dAtA7 := make([]byte, len(m.MetTags)*10)
		var j6 int
		for _, num := range m.MetTags {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *ReservedMVTagSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReservedMVTagSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Tag))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *MaterializedViewSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaterializedViewSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Relation) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Relation)))
		i += copy(dAtA[i:], m.Relation)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintFactable(dAtA, i, uint64(m.View.ProtoSize()))
	n8, err := m.View.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.Desc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Retention != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Retention.ProtoSize()))
		n9, err := m.Retention.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Tag != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Tag))
	}
	if m.RelTag != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.RelTag))
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintFactable(dAtA, i, uint64(m.ResolvedView.ProtoSize()))
	n10, err := m.ResolvedView.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *MaterializedViewSpec_Retention) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaterializedViewSpec_Retention) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintFactable(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.RemoveAfter)))
	n11, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RemoveAfter, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.RelativeTo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.RelativeTo)))
		i += copy(dAtA[i:], m.RelativeTo)
	}
	if m.RelativeToTag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.RelativeToTag))
	}
	return i, nil
}

func (m *QuerySpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MaterializedView) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.MaterializedView)))
		i += copy(dAtA[i:], m.MaterializedView)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintFactable(dAtA, i, uint64(m.View.ProtoSize()))
	n12, err := m.View.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if len(m.Filters) > 0 {
		for _, msg := range m.Filters {
			dAtA[i] = 0x22
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QuerySpec_Filter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpec_Filter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dimension) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Dimension)))
		i += copy(dAtA[i:], m.Dimension)
	}
	if len(m.Ints) > 0 {
		for _, msg := range m.Ints {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Floats) > 0 {
		for _, msg := range m.Floats {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Strings) > 0 {
		for _, msg := range m.Strings {
			dAtA[i] = 0x22
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Times) > 0 {
		for _, msg := range m.Times {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QuerySpec_Filter_Int) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpec_Filter_Int) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Begin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Begin))
	}
	if m.End != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.End))
	}
	return i, nil
}

func (m *QuerySpec_Filter_Float) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpec_Filter_Float) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Begin != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Begin))))
		i += 8
	}
	if m.End != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.End))))
		i += 8
	}
	return i, nil
}

func (m *QuerySpec_Filter_String) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpec_Filter_String) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Begin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Begin)))
		i += copy(dAtA[i:], m.Begin)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	return i, nil
}

func (m *QuerySpec_Filter_Time) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpec_Filter_Time) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintFactable(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Begin)))
	n13, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Begin, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintFactable(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.End)))
	n14, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.End, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x1a
	i++
	i = encodeVarintFactable(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.RelativeBegin)))
	n15, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RelativeBegin, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x22
	i++
	i = encodeVarintFactable(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.RelativeEnd)))
	n16, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RelativeEnd, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *ResolvedQuery) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MvTag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.MvTag))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintFactable(dAtA, i, uint64(m.View.ProtoSize()))
	n17, err := m.View.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if len(m.Filters) > 0 {
		for _, msg := range m.Filters {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResolvedQuery_Filter) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedQuery_Filter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DimTag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.DimTag))
	}
	if len(m.Ranges) > 0 {
		for _, msg := range m.Ranges {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResolvedQuery_Filter_Range) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedQuery_Filter_Range) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Begin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Begin)))
		i += copy(dAtA[i:], m.Begin)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	return i, nil
}

func (m *ExecuteQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Header.ProtoSize()))
		n18, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.Shard) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Shard)))
		i += copy(dAtA[i:], m.Shard)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintFactable(dAtA, i, uint64(m.Query.ProtoSize()))
	n19, err := m.Query.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	return i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.Header.ProtoSize()))
		n20, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *SchemaSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mappings) > 0 {
		for _, msg := range m.Mappings {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Dimensions) > 0 {
		for _, msg := range m.Dimensions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Relations) > 0 {
		for _, msg := range m.Relations {
			dAtA[i] = 0x22
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Views) > 0 {
		for _, msg := range m.Views {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ReservedViewTags) > 0 {
		for _, msg := range m.ReservedViewTags {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFactable(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModRevision != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.ModRevision))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintFactable(dAtA, i, uint64(m.Spec.ProtoSize()))
	n21, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	if len(m.Instance) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.Instance)))
		i += copy(dAtA[i:], m.Instance)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintFactable(dAtA, i, uint64(m.DeltaPartitions.ProtoSize()))
	n22, err := m.DeltaPartitions.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func (m *UpdateSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExpectInstance) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactable(dAtA, i, uint64(len(m.ExpectInstance)))
		i += copy(dAtA[i:], m.ExpectInstance)
	}
	if m.ExpectModRevision != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFactable(dAtA, i, uint64(m.ExpectModRevision))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintFactable(dAtA, i, uint64(m.Update.ProtoSize()))
	n23, err := m.Update.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	return i, nil
}

func encodeVarintFactable(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MappingSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	return n
}

func (m *DimensionSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFactable(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	return n
}

func (m *MetricSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Dimension)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFactable(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	if m.DimTag != 0 {
		n += 1 + sovFactable(uint64(m.DimTag))
	}
	return n
}

func (m *RelationSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = m.Selector.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	l = len(m.Mapping)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		for _, s := range m.Dimensions {
			l = len(s)
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	if m.MapTag != 0 {
		n += 1 + sovFactable(uint64(m.MapTag))
	}
	if len(m.DimTags) > 0 {
		l = 0
		for _, e := range m.DimTags {
			l += sovFactable(uint64(e))
		}
		n += 1 + sovFactable(uint64(l)) + l
	}
	return n
}

func (m *ViewSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, s := range m.Dimensions {
			l = len(s)
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for _, s := range m.Metrics {
			l = len(s)
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *ResolvedView) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DimTags) > 0 {
		l = 0
		for _, e := range m.DimTags {
			l += sovFactable(uint64(e))
		}
		n += 1 + sovFactable(uint64(l)) + l
	}
	if len(m.MetTags) > 0 {
		l = 0
		for _, e := range m.MetTags {
			l += sovFactable(uint64(e))
		}
		n += 1 + sovFactable(uint64(l)) + l
	}
	return n
}

func (m *ReservedMVTagSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	return n
}

func (m *MaterializedViewSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Relation)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = m.View.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Retention != nil {
		l = m.Retention.ProtoSize()
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	if m.RelTag != 0 {
		n += 1 + sovFactable(uint64(m.RelTag))
	}
	l = m.ResolvedView.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func (m *MaterializedViewSpec_Retention) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RemoveAfter)
	n += 1 + l + sovFactable(uint64(l))
	l = len(m.RelativeTo)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.RelativeToTag != 0 {
		n += 1 + sovFactable(uint64(m.RelativeToTag))
	}
	return n
}

func (m *QuerySpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MaterializedView)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = m.View.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *QuerySpec_Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dimension)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if len(m.Ints) > 0 {
		for _, e := range m.Ints {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Floats) > 0 {
		for _, e := range m.Floats {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Strings) > 0 {
		for _, e := range m.Strings {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Times) > 0 {
		for _, e := range m.Times {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *QuerySpec_Filter_Int) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 1 + sovFactable(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovFactable(uint64(m.End))
	}
	return n
}

func (m *QuerySpec_Filter_Float) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 9
	}
	if m.End != 0 {
		n += 9
	}
	return n
}

func (m *QuerySpec_Filter_String) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Begin)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	return n
}

func (m *QuerySpec_Filter_Time) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Begin)
	n += 1 + l + sovFactable(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.End)
	n += 1 + l + sovFactable(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RelativeBegin)
	n += 1 + l + sovFactable(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RelativeEnd)
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func (m *ResolvedQuery) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MvTag != 0 {
		n += 1 + sovFactable(uint64(m.MvTag))
	}
	l = m.View.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *ResolvedQuery_Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DimTag != 0 {
		n += 1 + sovFactable(uint64(m.DimTag))
	}
	if len(m.Ranges) > 0 {
		for _, e := range m.Ranges {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *ResolvedQuery_Filter_Range) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Begin)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	return n
}

func (m *ExecuteQueryRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.ProtoSize()
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Shard)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = m.Query.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func (m *QueryResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.ProtoSize()
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	return n
}

func (m *SchemaSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mappings) > 0 {
		for _, e := range m.Mappings {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Dimensions) > 0 {
		for _, e := range m.Dimensions {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Views) > 0 {
		for _, e := range m.Views {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.ReservedViewTags) > 0 {
		for _, e := range m.ReservedViewTags {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *GetSchemaResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModRevision != 0 {
		n += 1 + sovFactable(uint64(m.ModRevision))
	}
	l = m.Spec.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = m.DeltaPartitions.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func (m *UpdateSchemaRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExpectInstance)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.ExpectModRevision != 0 {
		n += 1 + sovFactable(uint64(m.ExpectModRevision))
	}
	l = m.Update.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func sovFactable(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFactable(x uint64) (n int) {
	return sovFactable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MappingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MappingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MappingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (MapTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DimensionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DimensionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DimensionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (DimensionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (DimTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MetricType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (MetTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DimTag", wireType)
			}
			m.DimTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DimTag |= (DimTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapping", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mapping = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimensions = append(m.Dimensions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (RelTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapTag", wireType)
			}
			m.MapTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapTag |= (MapTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v DimTag
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFactable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DimTag(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DimTags = append(m.DimTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFactable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFactable
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DimTags) == 0 {
					m.DimTags = make([]DimTag, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DimTag
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFactable
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DimTag(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DimTags = append(m.DimTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DimTags", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimensions = append(m.Dimensions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v DimTag
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFactable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DimTag(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DimTags = append(m.DimTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFactable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFactable
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DimTags) == 0 {
					m.DimTags = make([]DimTag, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DimTag
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFactable
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DimTag(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DimTags = append(m.DimTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DimTags", wireType)
			}
		case 2:
			if wireType == 0 {
				var v MetTag
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFactable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (MetTag(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MetTags = append(m.MetTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFactable
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFactable
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MetTags) == 0 {
					m.MetTags = make([]MetTag, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v MetTag
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFactable
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (MetTag(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MetTags = append(m.MetTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MetTags", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReservedMVTagSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReservedMVTagSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReservedMVTagSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (MVTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaterializedViewSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaterializedViewSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaterializedViewSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.View.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Retention == nil {
				m.Retention = &MaterializedViewSpec_Retention{}
			}
			if err := m.Retention.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (MVTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelTag", wireType)
			}
			m.RelTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelTag |= (RelTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResolvedView.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaterializedViewSpec_Retention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Retention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Retention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RemoveAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelativeTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeToTag", wireType)
			}
			m.RelativeToTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelativeToTag |= (DimTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterializedView", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaterializedView = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.View.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, QuerySpec_Filter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpec_Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ints = append(m.Ints, QuerySpec_Filter_Int{})
			if err := m.Ints[len(m.Ints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Floats = append(m.Floats, QuerySpec_Filter_Float{})
			if err := m.Floats[len(m.Floats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strings = append(m.Strings, QuerySpec_Filter_String{})
			if err := m.Strings[len(m.Strings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Times = append(m.Times, QuerySpec_Filter_Time{})
			if err := m.Times[len(m.Times)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpec_Filter_Int) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpec_Filter_Float) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Float: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Float: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Begin = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.End = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpec_Filter_String) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: String: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: String: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Begin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpec_Filter_Time) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Begin, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.End, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeBegin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RelativeBegin, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RelativeEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MvTag", wireType)
			}
			m.MvTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MvTag |= (MVTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.View.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, ResolvedQuery_Filter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedQuery_Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DimTag", wireType)
			}
			m.DimTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DimTag |= (DimTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranges = append(m.Ranges, ResolvedQuery_Filter_Range{})
			if err := m.Ranges[len(m.Ranges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedQuery_Filter_Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Begin = append(m.Begin[:0], dAtA[iNdEx:postIndex]...)
			if m.Begin == nil {
				m.Begin = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &protocol.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shard = github_com_LiveRamp_gazette_v2_pkg_consumer.ShardID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &protocol.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mappings = append(m.Mappings, MappingSpec{})
			if err := m.Mappings[len(m.Mappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimensions = append(m.Dimensions, DimensionSpec{})
			if err := m.Dimensions[len(m.Dimensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, MetricSpec{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, RelationSpec{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Views = append(m.Views, MaterializedViewSpec{})
			if err := m.Views[len(m.Views)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedViewTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedViewTags = append(m.ReservedViewTags, ReservedMVTagSpec{})
			if err := m.ReservedViewTags[len(m.ReservedViewTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModRevision", wireType)
			}
			m.ModRevision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModRevision |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaPartitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeltaPartitions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectInstance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectInstance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectModRevision", wireType)
			}
			m.ExpectModRevision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectModRevision |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFactable(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFactable
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFactable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFactable
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFactable
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFactable(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFactable = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFactable   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("factable.proto", fileDescriptor_factable_3e4e00c80e828d06) }

var fileDescriptor_factable_3e4e00c80e828d06 = []byte{
	// 1723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcd, 0x73, 0x1a, 0xc9,
	0x15, 0xd7, 0x30, 0xc3, 0x00, 0x0f, 0x24, 0x8f, 0x5a, 0xca, 0x8a, 0xc5, 0x0e, 0x68, 0x49, 0x52,
	0x51, 0xed, 0x07, 0x72, 0xe1, 0x54, 0xd6, 0x51, 0x92, 0xad, 0x88, 0x80, 0x24, 0xb6, 0x84, 0xd7,
	0x19, 0xb0, 0x52, 0x39, 0x51, 0x23, 0x68, 0xa1, 0xa9, 0x30, 0x1f, 0x3b, 0xd3, 0xb0, 0x96, 0x8f,
	0xc9, 0x3d, 0x71, 0x6e, 0x39, 0xba, 0xfc, 0x7f, 0xa4, 0x7c, 0xf0, 0x45, 0x87, 0x1c, 0x7c, 0xc8,
	0x21, 0x27, 0xa5, 0x62, 0xdd, 0x73, 0xc8, 0xd1, 0xa7, 0xad, 0xfe, 0x9a, 0x19, 0x24, 0x90, 0xe5,
	0x13, 0x74, 0xf7, 0xfb, 0xbd, 0x7e, 0x5f, 0xbf, 0xd7, 0x6f, 0x60, 0xe5, 0xc4, 0x1a, 0x10, 0xeb,
	0x78, 0x8c, 0x6b, 0x7e, 0xe0, 0x11, 0x0f, 0x65, 0xe5, 0xba, 0xf4, 0xc5, 0xc8, 0x26, 0xa7, 0x93,
	0xe3, 0xda, 0xc0, 0x73, 0xb6, 0x47, 0xde, 0xc8, 0xdb, 0x66, 0x02, 0xc7, 0x93, 0x13, 0xb6, 0x62,
	0x0b, 0xf6, 0x8f, 0x03, 0x4b, 0x3b, 0x09, 0xf1, 0x43, 0x7b, 0x8a, 0x4d, 0xcb, 0xf1, 0xb7, 0x47,
	0xd6, 0x33, 0x4c, 0x08, 0xde, 0x9e, 0xd6, 0xb7, 0xfd, 0x3f, 0x8e, 0xb8, 0x86, 0x81, 0x37, 0x8e,
	0xfe, 0x08, 0x6c, 0x79, 0xe4, 0x79, 0xa3, 0x31, 0x8e, 0x6f, 0x18, 0x4e, 0x02, 0x8b, 0xd8, 0x9e,
	0x2b, 0xce, 0x2b, 0x57, 0xcf, 0x89, 0xed, 0xe0, 0x90, 0x58, 0x8e, 0x2f, 0x04, 0xee, 0x5e, 0x15,
	0xc0, 0x8e, 0x4f, 0xce, 0xf8, 0x61, 0xb5, 0x0b, 0xf9, 0x8e, 0xe5, 0xfb, 0xb6, 0x3b, 0xea, 0xfa,
	0x78, 0x80, 0x10, 0x68, 0xae, 0xe5, 0xe0, 0xa2, 0xb2, 0xa9, 0x6c, 0xe5, 0x4c, 0xf6, 0x9f, 0xee,
	0x0d, 0x71, 0x38, 0x28, 0xa6, 0xf8, 0x1e, 0xfd, 0x8f, 0xee, 0x81, 0x4a, 0xac, 0x51, 0x51, 0xdd,
	0x54, 0xb6, 0xb4, 0x06, 0xbc, 0xbb, 0xa8, 0xe8, 0x1d, 0xcb, 0xef, 0x59, 0x23, 0x93, 0x6e, 0x57,
	0xff, 0xa4, 0xc0, 0x72, 0xd3, 0x76, 0xb0, 0x1b, 0xda, 0x9e, 0xbb, 0x50, 0xef, 0x67, 0xa0, 0x91,
	0x33, 0x1f, 0x33, 0xbd, 0x2b, 0xf5, 0x8d, 0x5a, 0x14, 0xec, 0x08, 0xda, 0x3b, 0xf3, 0xb1, 0xc9,
	0x84, 0x22, 0x23, 0xd4, 0xeb, 0x46, 0x68, 0xb1, 0x11, 0x4d, 0xdb, 0x89, 0x8c, 0xf8, 0x97, 0x02,
	0xd0, 0xc1, 0x24, 0xb0, 0x07, 0x0b, 0x2d, 0xb8, 0x07, 0xb9, 0xa1, 0xbc, 0x4b, 0xb8, 0x17, 0x6f,
	0xa0, 0x2d, 0x61, 0x9f, 0xca, 0xec, 0x5b, 0x8f, 0xed, 0xe3, 0x5a, 0xe7, 0x18, 0xa7, 0x5d, 0x37,
	0x2e, 0x9d, 0x88, 0x10, 0x26, 0xd2, 0x38, 0xf4, 0x10, 0x32, 0x43, 0xdb, 0xe9, 0x53, 0x09, 0x9d,
	0x49, 0x54, 0xfe, 0x7f, 0x51, 0x59, 0x3d, 0xb3, 0x9c, 0xf1, 0x4e, 0xf5, 0x73, 0xcf, 0xb1, 0x09,
	0xcb, 0x51, 0x35, 0xe1, 0x93, 0x3e, 0x64, 0xbf, 0xd5, 0x57, 0x29, 0x28, 0x98, 0x78, 0xcc, 0x2a,
	0x60, 0xa1, 0x63, 0xbf, 0x80, 0x6c, 0x88, 0xc7, 0x78, 0x40, 0xbc, 0x80, 0xf9, 0x95, 0xaf, 0x6f,
	0xd4, 0xa2, 0xb2, 0x3a, 0xb4, 0x8e, 0xf1, 0xb8, 0x2b, 0x8e, 0x1b, 0xda, 0xf9, 0x45, 0x65, 0xc9,
	0x8c, 0xc4, 0x51, 0x11, 0x32, 0x0e, 0x2f, 0x08, 0x11, 0x6b, 0xb9, 0x44, 0x65, 0x80, 0x28, 0x38,
	0x61, 0x51, 0xdb, 0x54, 0xb7, 0x72, 0x66, 0x62, 0x27, 0x8a, 0x42, 0xfa, 0x7a, 0x14, 0xf4, 0x38,
	0x0a, 0x26, 0x1e, 0x27, 0xa3, 0xe0, 0x58, 0x3e, 0x8b, 0x42, 0xe6, 0x3d, 0x51, 0x10, 0xe5, 0xa5,
	0x3b, 0xec, 0x17, 0xed, 0x40, 0x56, 0xc4, 0x2f, 0x2c, 0x66, 0x37, 0xd5, 0xdb, 0x04, 0x30, 0xc3,
	0x03, 0x18, 0x56, 0x9b, 0x90, 0x3d, 0xb2, 0xf1, 0x77, 0x2c, 0x78, 0xb3, 0x3e, 0x29, 0xd7, 0x7c,
	0xa2, 0xd1, 0x60, 0xd9, 0x0e, 0x8b, 0x29, 0x76, 0x28, 0x97, 0xd5, 0x63, 0x9a, 0x86, 0xd0, 0x1b,
	0x4f, 0xf1, 0x90, 0x6a, 0x43, 0x3f, 0x49, 0x58, 0xa4, 0x30, 0x8b, 0x60, 0xce, 0xe5, 0x54, 0xcc,
	0xc1, 0x84, 0x8b, 0xa5, 0x62, 0x31, 0x51, 0x1b, 0x54, 0x3b, 0x15, 0xdb, 0xd1, 0x5e, 0xbc, 0xa8,
	0x28, 0xd5, 0x26, 0xac, 0x9a, 0x38, 0xc4, 0xc1, 0x14, 0x0f, 0x3b, 0x47, 0x3d, 0x8b, 0x53, 0xf4,
	0x2e, 0x0f, 0xa9, 0xc2, 0x02, 0x96, 0x7b, 0x77, 0x51, 0x49, 0xb3, 0x33, 0x1e, 0xd1, 0x39, 0x5c,
	0xad, 0xbe, 0xd2, 0x60, 0xbd, 0x63, 0x11, 0x1c, 0xd8, 0xd6, 0xd8, 0x7e, 0xc6, 0xcd, 0x5d, 0x58,
	0x39, 0x25, 0xc8, 0x06, 0xa2, 0xba, 0x84, 0x92, 0x68, 0x8d, 0x3e, 0x07, 0x6d, 0x6a, 0xe3, 0xef,
	0x58, 0x5d, 0xe4, 0xeb, 0x28, 0x26, 0x84, 0xd4, 0x28, 0x8a, 0x89, 0x49, 0xcd, 0x25, 0xc5, 0x1e,
	0xe4, 0x02, 0x4c, 0xb0, 0xcb, 0xd4, 0xa7, 0x99, 0x9a, 0xad, 0x04, 0xaf, 0xe6, 0x18, 0x59, 0x33,
	0xa5, 0xbc, 0x19, 0x43, 0x65, 0x0c, 0xf4, 0xb9, 0x31, 0x78, 0x08, 0x99, 0x00, 0x8f, 0x6f, 0x55,
	0x55, 0xa2, 0x18, 0xf5, 0x80, 0xfd, 0xa2, 0x23, 0x58, 0x0e, 0x44, 0x4e, 0xfb, 0xcc, 0xd3, 0x2c,
	0x33, 0xf1, 0xa3, 0xd8, 0xc4, 0x64, 0xca, 0x1b, 0x1f, 0x53, 0x6f, 0xe7, 0xea, 0x36, 0x0b, 0x41,
	0x42, 0xb0, 0xf4, 0x0f, 0x05, 0x72, 0x91, 0x1f, 0x68, 0x0f, 0x0a, 0x01, 0x76, 0xbc, 0x29, 0xee,
	0x5b, 0x27, 0x04, 0x07, 0x2c, 0xfc, 0xf9, 0xfa, 0xc7, 0x35, 0xde, 0xa6, 0x6b, 0xb2, 0x4d, 0xd7,
	0x9a, 0xa2, 0xcf, 0x37, 0xb2, 0xf4, 0x9e, 0xbf, 0xff, 0xa7, 0xa2, 0x98, 0x79, 0x0e, 0xdc, 0xa5,
	0x38, 0x54, 0x81, 0x3c, 0x4f, 0xcd, 0x14, 0xf7, 0x89, 0x27, 0xb2, 0x05, 0x72, 0xab, 0xe7, 0xa1,
	0x7d, 0xb8, 0x93, 0x10, 0xe8, 0xc7, 0x0d, 0xfb, 0xbd, 0x5c, 0x59, 0x8e, 0xb5, 0xd0, 0x9e, 0xf3,
	0x3f, 0x1d, 0x72, 0xbf, 0x9b, 0xe0, 0xe0, 0x8c, 0x95, 0xcd, 0x67, 0xb0, 0xea, 0x24, 0x32, 0xc5,
	0x23, 0xc5, 0x6f, 0x37, 0x9c, 0x2b, 0x29, 0xfc, 0xc0, 0x9a, 0xd9, 0x81, 0xcc, 0x89, 0x3d, 0x26,
	0x38, 0xe0, 0xfd, 0x25, 0x5f, 0x2f, 0xc5, 0x80, 0xc8, 0x80, 0xda, 0x1e, 0x13, 0x11, 0x40, 0x09,
	0x28, 0xbd, 0x4e, 0x83, 0xce, 0x4f, 0x66, 0xfb, 0xba, 0x72, 0xb5, 0xaf, 0x3f, 0x04, 0xcd, 0x76,
	0x09, 0xa7, 0x5f, 0xbe, 0x5e, 0x5e, 0x7c, 0x43, 0xad, 0xed, 0x12, 0x69, 0x1e, 0x45, 0xa0, 0xaf,
	0x40, 0x3f, 0x19, 0x7b, 0x16, 0x09, 0x8b, 0x2a, 0xc3, 0x6e, 0xde, 0x80, 0xdd, 0xa3, 0x82, 0x02,
	0x2d, 0x50, 0x68, 0x17, 0x32, 0x21, 0x09, 0x6c, 0x77, 0x24, 0xdd, 0xfb, 0xe4, 0x06, 0x05, 0x5d,
	0x26, 0x29, 0xbd, 0x14, 0x38, 0xf4, 0x4b, 0x48, 0xb3, 0xf7, 0xbd, 0x98, 0x66, 0x0a, 0x2a, 0x37,
	0x28, 0xe8, 0xd9, 0x0e, 0x16, 0x70, 0x8e, 0x29, 0x7d, 0x01, 0x6a, 0xdb, 0x25, 0x68, 0x1d, 0xd2,
	0xc7, 0x78, 0x64, 0xf3, 0xd0, 0xa8, 0x26, 0x5f, 0x20, 0x03, 0x54, 0xec, 0x0e, 0x59, 0x22, 0x55,
	0x93, 0xfe, 0x2d, 0x6d, 0x43, 0x9a, 0x79, 0x31, 0x0b, 0x50, 0xe6, 0x00, 0x14, 0x0e, 0xb8, 0x0f,
	0x3a, 0xb7, 0x7a, 0x16, 0x91, 0x9b, 0x83, 0xc8, 0x71, 0xc4, 0x5f, 0x52, 0xa0, 0x51, 0x3b, 0xd1,
	0x4e, 0x12, 0x40, 0xf3, 0x7e, 0x95, 0x0d, 0x3d, 0x39, 0xd5, 0x70, 0x3a, 0x3c, 0xa7, 0x74, 0x10,
	0x6a, 0x7f, 0x1e, 0xab, 0xbd, 0x2d, 0x92, 0x02, 0xd0, 0xd7, 0xb0, 0x12, 0xf1, 0x83, 0x5f, 0xae,
	0xde, 0x9e, 0x8a, 0x11, 0x45, 0x1a, 0xcc, 0x06, 0x46, 0x6a, 0xa1, 0x8b, 0x1a, 0xa3, 0x7d, 0x10,
	0xa9, 0x39, 0xb0, 0xe5, 0x0e, 0xbf, 0xd6, 0xb2, 0x8a, 0x91, 0xaa, 0x9e, 0xa7, 0x60, 0x59, 0xb6,
	0x1a, 0x96, 0x57, 0xb4, 0x09, 0xba, 0x33, 0xed, 0xcf, 0x6d, 0xfc, 0x69, 0x67, 0x4a, 0x9b, 0xd7,
	0x7d, 0xc1, 0xb4, 0xd4, 0x8d, 0x3d, 0x2b, 0xc9, 0xb6, 0xaf, 0x62, 0xb6, 0xa9, 0x57, 0xb9, 0x30,
	0x73, 0xfb, 0x02, 0xc6, 0xbd, 0x54, 0x22, 0xc6, 0xfd, 0x28, 0x9e, 0x67, 0x58, 0x51, 0xcd, 0x3c,
	0x7e, 0x62, 0x74, 0x41, 0x0d, 0xd0, 0x03, 0xcb, 0x1d, 0x61, 0x49, 0xbd, 0x1f, 0xdf, 0x7c, 0x5d,
	0xcd, 0xa4, 0xc2, 0x92, 0x42, 0x1c, 0x49, 0x6b, 0x92, 0x6d, 0xcf, 0x56, 0x58, 0x61, 0x4e, 0x85,
	0x15, 0x58, 0x92, 0xab, 0xaf, 0x15, 0x58, 0x6b, 0x3d, 0xc5, 0x83, 0x09, 0xc1, 0x4c, 0xb9, 0x89,
	0xbf, 0x9d, 0xe0, 0x90, 0xa0, 0x2d, 0xd0, 0x4f, 0xb1, 0x35, 0x8c, 0xfa, 0xaf, 0x11, 0x0f, 0x48,
	0x07, 0x6c, 0xdf, 0x14, 0xe7, 0xa8, 0x03, 0xe9, 0xf0, 0xd4, 0x0a, 0x44, 0xdd, 0x36, 0xbe, 0x7c,
	0x77, 0x51, 0x79, 0x70, 0x8b, 0x79, 0x7e, 0xe0, 0xb9, 0xe1, 0xc4, 0xa1, 0x44, 0xa6, 0xe0, 0x76,
	0xd3, 0xe4, 0x5a, 0xd0, 0x03, 0x48, 0x7f, 0x4b, 0x0d, 0x11, 0xc5, 0xb6, 0xb1, 0x20, 0x08, 0x92,
	0xb9, 0x4c, 0xb6, 0xda, 0x85, 0x65, 0x61, 0x7d, 0xe8, 0x7b, 0x6e, 0x88, 0x3f, 0xc0, 0xfc, 0x22,
	0x64, 0x06, 0x9e, 0x4b, 0x1f, 0x1f, 0x11, 0x16, 0xb9, 0xac, 0xfe, 0x59, 0x05, 0xe8, 0x0e, 0x4e,
	0xb1, 0x63, 0xb1, 0xbe, 0xfe, 0x25, 0x64, 0xc5, 0xa8, 0xc7, 0x27, 0x98, 0x7c, 0xfd, 0x07, 0xc9,
	0xb7, 0x39, 0xfa, 0x48, 0x90, 0x23, 0xa3, 0x14, 0x46, 0xbf, 0x9e, 0x19, 0xa2, 0x78, 0x6e, 0xe7,
	0x8d, 0xf3, 0x09, 0x70, 0x72, 0xc6, 0xfa, 0x59, 0x3c, 0x63, 0xf1, 0x32, 0xbc, 0x36, 0x6a, 0x27,
	0x80, 0x52, 0x14, 0xed, 0xd0, 0x51, 0x82, 0x0f, 0x26, 0xb2, 0x9b, 0xce, 0xd4, 0x7c, 0x3c, 0x21,
	0x0b, 0x64, 0x2c, 0x4e, 0x9b, 0x0d, 0x25, 0x80, 0x6c, 0xa2, 0xe5, 0x9b, 0x47, 0x10, 0x99, 0x09,
	0x06, 0x41, 0xdf, 0x00, 0x0a, 0xc4, 0x4c, 0xc6, 0x5e, 0x3e, 0x3e, 0xca, 0xe9, 0x4c, 0xd1, 0xdd,
	0x99, 0x5c, 0xce, 0xce, 0x6d, 0x42, 0x8b, 0x21, 0xc1, 0x54, 0x3b, 0x1b, 0x47, 0xff, 0xa9, 0xc0,
	0xea, 0x3e, 0x26, 0x3c, 0x11, 0x51, 0x7e, 0x3f, 0x81, 0x82, 0xe3, 0x0d, 0xfb, 0x01, 0x9e, 0xda,
	0xd1, 0x2b, 0xa6, 0x9a, 0x79, 0xc7, 0x1b, 0x9a, 0x62, 0x0b, 0xd5, 0x40, 0x0b, 0x7d, 0x3c, 0x10,
	0x84, 0x4f, 0x04, 0x2d, 0xce, 0xa9, 0xa4, 0x3b, 0x95, 0xa3, 0xa3, 0x9d, 0xed, 0x86, 0xc4, 0x72,
	0x07, 0x58, 0x8c, 0xf6, 0xd1, 0x1a, 0x1d, 0x80, 0x31, 0xc4, 0x63, 0x62, 0xf5, 0x7d, 0x2b, 0x20,
	0xb6, 0x0c, 0xea, 0x2d, 0x3e, 0x1c, 0xee, 0x30, 0xd8, 0xe3, 0x08, 0x55, 0x7d, 0xa9, 0xc0, 0xda,
	0x13, 0x7f, 0x68, 0x11, 0x2c, 0x3d, 0xe2, 0x7c, 0xfb, 0x29, 0xdc, 0xc1, 0x4f, 0x7d, 0x3c, 0x20,
	0xfd, 0xc8, 0x08, 0xfe, 0x36, 0xac, 0xf0, 0xed, 0xb6, 0x34, 0xa5, 0x06, 0x6b, 0x42, 0x70, 0x26,
	0x00, 0xfc, 0x5d, 0x5a, 0xe5, 0x47, 0x9d, 0x44, 0x18, 0xea, 0xa0, 0x4f, 0xd8, 0x7d, 0x82, 0x50,
	0x37, 0x05, 0x42, 0x48, 0x7e, 0xfa, 0xfb, 0xc4, 0xf7, 0x29, 0xfd, 0x8e, 0x43, 0xeb, 0x60, 0xb4,
	0x1f, 0x1d, 0xed, 0x1e, 0xb6, 0x9b, 0xfd, 0x66, 0xbb, 0xd3, 0xef, 0xfd, 0xe1, 0x71, 0xcb, 0x58,
	0x42, 0x00, 0xfa, 0xd1, 0xae, 0xd9, 0x7e, 0xd4, 0x33, 0x14, 0x94, 0x83, 0xf4, 0xde, 0xe1, 0x37,
	0xbb, 0x3d, 0x43, 0xa5, 0xdb, 0xdd, 0x9e, 0xd9, 0x7e, 0xb4, 0x6f, 0x68, 0x68, 0x19, 0x72, 0xbd,
	0x76, 0xa7, 0xd5, 0xed, 0xed, 0x76, 0x1e, 0x1b, 0xe9, 0x4f, 0x4f, 0xe4, 0x37, 0x27, 0xd3, 0xba,
	0x01, 0x6b, 0x52, 0x6b, 0xa7, 0xd5, 0x33, 0xdb, 0xbf, 0x95, 0x8a, 0x57, 0x00, 0xb8, 0xe2, 0x7e,
	0xf7, 0x49, 0xc7, 0x50, 0x90, 0x01, 0x05, 0xb1, 0xde, 0xdf, 0x7d, 0xb2, 0xdf, 0x32, 0x52, 0x54,
	0x2f, 0xbb, 0x8e, 0x09, 0xa8, 0x14, 0xc0, 0xaf, 0xec, 0x1f, 0x1c, 0x1e, 0x1a, 0x5a, 0xfd, 0x6f,
	0x0a, 0xe8, 0xdc, 0x3b, 0xf4, 0x1b, 0xc8, 0x45, 0xe5, 0x83, 0x3e, 0xba, 0xf6, 0xe0, 0xb4, 0xe8,
	0x6c, 0x57, 0x4a, 0x54, 0xe6, 0xf5, 0x5a, 0x6b, 0x41, 0x21, 0x99, 0x31, 0xf4, 0xc3, 0x58, 0x78,
	0x4e, 0x26, 0x4b, 0x0b, 0xee, 0xa8, 0xff, 0x55, 0x81, 0x34, 0x7f, 0xac, 0x7e, 0x15, 0x7d, 0x1b,
	0xf1, 0xf5, 0xda, 0x9c, 0x29, 0xa5, 0xb4, 0xa8, 0xf1, 0xa1, 0x03, 0x28, 0x24, 0x1b, 0x76, 0xd2,
	0x9c, 0x39, 0x8d, 0x3c, 0xa9, 0x67, 0xa6, 0x45, 0xde, 0x57, 0x1a, 0xf7, 0xce, 0xff, 0x5b, 0x5e,
	0x3a, 0x7f, 0x5b, 0x56, 0xde, 0xbc, 0x2d, 0x2b, 0xcf, 0x2f, 0xcb, 0x4b, 0x2f, 0x2e, 0xcb, 0xca,
	0x9b, 0xcb, 0xf2, 0xd2, 0xbf, 0x2f, 0xcb, 0x4b, 0xc7, 0x3a, 0xb3, 0xff, 0xc1, 0xf7, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x07, 0x58, 0x54, 0xc6, 0xe6, 0x11, 0x00, 0x00,
}
