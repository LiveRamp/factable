// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/factable/factable.proto

package factable

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	protocol "go.gazette.dev/core/broker/protocol"
	go_gazette_dev_core_consumer_protocol "go.gazette.dev/core/consumer/protocol"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DimensionType int32

const (
	DimensionType_INVALID_DIM_TYPE DimensionType = 0
	DimensionType_VARINT           DimensionType = 1
	DimensionType_FLOAT            DimensionType = 3
	DimensionType_STRING           DimensionType = 4
	DimensionType_TIMESTAMP        DimensionType = 5
)

var DimensionType_name = map[int32]string{
	0: "INVALID_DIM_TYPE",
	1: "VARINT",
	3: "FLOAT",
	4: "STRING",
	5: "TIMESTAMP",
}

var DimensionType_value = map[string]int32{
	"INVALID_DIM_TYPE": 0,
	"VARINT":           1,
	"FLOAT":            3,
	"STRING":           4,
	"TIMESTAMP":        5,
}

func (x DimensionType) String() string {
	return proto.EnumName(DimensionType_name, int32(x))
}

func (DimensionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{0}
}

type MetricType int32

const (
	MetricType_INVALID_METRIC_TYPE MetricType = 0
	MetricType_VARINT_SUM          MetricType = 1
	MetricType_VARINT_GAUGE        MetricType = 2
	MetricType_FLOAT_SUM           MetricType = 3
	MetricType_STRING_HLL          MetricType = 4
)

var MetricType_name = map[int32]string{
	0: "INVALID_METRIC_TYPE",
	1: "VARINT_SUM",
	2: "VARINT_GAUGE",
	3: "FLOAT_SUM",
	4: "STRING_HLL",
}

var MetricType_value = map[string]int32{
	"INVALID_METRIC_TYPE": 0,
	"VARINT_SUM":          1,
	"VARINT_GAUGE":        2,
	"FLOAT_SUM":           3,
	"STRING_HLL":          4,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}

func (MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{1}
}

// MappingSpec defines a Mapping of input Messages to InputRecords. In many
// cases, Relations will opt to use an identity Mapping. For events having
// de-normalized & nested event structures, Mappings provide a means to
// "unpack" into multiple normalized RelationRows. For example a "purchase"
// event having several product SKUs might map to a RelationRow{purchase, SKU}
// tuple for each purchased product.
type MappingSpec struct {
	// Short, unique name of the Mapping.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Longer, free-form description of the Mapping.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// Unique tag of the Mapping.
	Tag MapTag `protobuf:"varint,3,opt,name=tag,proto3,casttype=MapTag" json:"tag,omitempty"`
}

func (m *MappingSpec) Reset()         { *m = MappingSpec{} }
func (m *MappingSpec) String() string { return proto.CompactTextString(m) }
func (*MappingSpec) ProtoMessage()    {}
func (*MappingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{0}
}
func (m *MappingSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MappingSpec.Unmarshal(m, b)
}
func (m *MappingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MappingSpec.Marshal(b, m, deterministic)
}
func (m *MappingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MappingSpec.Merge(m, src)
}
func (m *MappingSpec) XXX_Size() int {
	return xxx_messageInfo_MappingSpec.Size(m)
}
func (m *MappingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MappingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MappingSpec proto.InternalMessageInfo

// DimensionSpec defines a Dimension which may be extracted from a RelationRow.
type DimensionSpec struct {
	// Short, unique name of the Dimension.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the Dimension. Immutable.
	Type DimensionType `protobuf:"varint,2,opt,name=type,proto3,enum=factable.DimensionType" json:"type,omitempty"`
	// Longer, free-form description of the Dimension.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// Unique tag of the dimension.
	Tag DimTag `protobuf:"varint,4,opt,name=tag,proto3,casttype=DimTag" json:"tag,omitempty"`
}

func (m *DimensionSpec) Reset()         { *m = DimensionSpec{} }
func (m *DimensionSpec) String() string { return proto.CompactTextString(m) }
func (*DimensionSpec) ProtoMessage()    {}
func (*DimensionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{1}
}
func (m *DimensionSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DimensionSpec.Unmarshal(m, b)
}
func (m *DimensionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DimensionSpec.Marshal(b, m, deterministic)
}
func (m *DimensionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DimensionSpec.Merge(m, src)
}
func (m *DimensionSpec) XXX_Size() int {
	return xxx_messageInfo_DimensionSpec.Size(m)
}
func (m *DimensionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DimensionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DimensionSpec proto.InternalMessageInfo

// MetricSpec defines a Metric which may be derived from a specified Dimension.
type MetricSpec struct {
	// Short, unique name of the Metric.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Dimension from which the Metric is extracted.
	Dimension string `protobuf:"bytes,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
	// Type of the Metric. Immutable.
	Type MetricType `protobuf:"varint,3,opt,name=type,proto3,enum=factable.MetricType" json:"type,omitempty"`
	// Longer, free-form description of the Metric.
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// Unique tag of the Metric.
	Tag MetTag `protobuf:"varint,5,opt,name=tag,proto3,casttype=MetTag" json:"tag,omitempty"`
	// Resolved DimTag of |dimension|. Immutable.
	DimTag DimTag `protobuf:"varint,6,opt,name=dim_tag,json=dimTag,proto3,casttype=DimTag" json:"dim_tag,omitempty" yaml:",omitempty"`
}

func (m *MetricSpec) Reset()         { *m = MetricSpec{} }
func (m *MetricSpec) String() string { return proto.CompactTextString(m) }
func (*MetricSpec) ProtoMessage()    {}
func (*MetricSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{2}
}
func (m *MetricSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricSpec.Unmarshal(m, b)
}
func (m *MetricSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricSpec.Marshal(b, m, deterministic)
}
func (m *MetricSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricSpec.Merge(m, src)
}
func (m *MetricSpec) XXX_Size() int {
	return xxx_messageInfo_MetricSpec.Size(m)
}
func (m *MetricSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MetricSpec proto.InternalMessageInfo

// RelationSpec composes a journal LabelSelector, which defines a collection of
// input events, with a mapping that transforms each event into one or more
// RelationRows.
type RelationSpec struct {
	// Short, unique name of the Relation.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// LabelSelector identifies journals which, taken together, compose the "rows" of the Relation.
	Selector protocol.LabelSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector"`
	// Mapping which transforms journal events into Relation rows.
	Mapping string `protobuf:"bytes,3,opt,name=mapping,proto3" json:"mapping,omitempty"`
	// Dimensions of the Relation. Dimensions may be added and removed over time,
	// but all Dimensions or derived Metrics of current MaterializedViewSpecs must
	// refer to current Dimensions of the RelationSpec.
	Dimensions []string `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Longer, free-form description of the Relation.
	Desc string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	// Unique tag of the Relation.
	Tag RelTag `protobuf:"varint,6,opt,name=tag,proto3,casttype=RelTag" json:"tag,omitempty"`
	// Resolved MapTag of |mapping|. Immutable.
	MapTag MapTag `protobuf:"varint,7,opt,name=map_tag,json=mapTag,proto3,casttype=MapTag" json:"map_tag,omitempty" yaml:",omitempty"`
	// Resolved DimTags of |dimensions|. Immutable.
	DimTags []DimTag `protobuf:"varint,8,rep,packed,name=dim_tags,json=dimTags,proto3,casttype=DimTag" json:"dim_tags,omitempty" yaml:",omitempty"`
}

func (m *RelationSpec) Reset()         { *m = RelationSpec{} }
func (m *RelationSpec) String() string { return proto.CompactTextString(m) }
func (*RelationSpec) ProtoMessage()    {}
func (*RelationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{3}
}
func (m *RelationSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelationSpec.Unmarshal(m, b)
}
func (m *RelationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelationSpec.Marshal(b, m, deterministic)
}
func (m *RelationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationSpec.Merge(m, src)
}
func (m *RelationSpec) XXX_Size() int {
	return xxx_messageInfo_RelationSpec.Size(m)
}
func (m *RelationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RelationSpec proto.InternalMessageInfo

// ViewSpec defines a summarized view over a Relation, composing a subset of
// Relation dimensions with a set of derived Metrics.
type ViewSpec struct {
	// Ordered Dimensions summarized by the ViewSpec.
	Dimensions []string `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Ordered Metrics aggregated by the ViewSpec.
	Metrics []string `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (m *ViewSpec) Reset()         { *m = ViewSpec{} }
func (m *ViewSpec) String() string { return proto.CompactTextString(m) }
func (*ViewSpec) ProtoMessage()    {}
func (*ViewSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{4}
}
func (m *ViewSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewSpec.Unmarshal(m, b)
}
func (m *ViewSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewSpec.Marshal(b, m, deterministic)
}
func (m *ViewSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewSpec.Merge(m, src)
}
func (m *ViewSpec) XXX_Size() int {
	return xxx_messageInfo_ViewSpec.Size(m)
}
func (m *ViewSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ViewSpec proto.InternalMessageInfo

type ResolvedView struct {
	// Resolved DimTags of ViewSpec Dimensions.
	DimTags []DimTag `protobuf:"varint,1,rep,packed,name=dim_tags,json=dimTags,proto3,casttype=DimTag" json:"dim_tags,omitempty"`
	// Resolved MetTags of ViewSpec Metrics.
	MetTags []MetTag `protobuf:"varint,2,rep,packed,name=met_tags,json=metTags,proto3,casttype=MetTag" json:"met_tags,omitempty"`
}

func (m *ResolvedView) Reset()         { *m = ResolvedView{} }
func (m *ResolvedView) String() string { return proto.CompactTextString(m) }
func (*ResolvedView) ProtoMessage()    {}
func (*ResolvedView) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{5}
}
func (m *ResolvedView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolvedView.Unmarshal(m, b)
}
func (m *ResolvedView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolvedView.Marshal(b, m, deterministic)
}
func (m *ResolvedView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedView.Merge(m, src)
}
func (m *ResolvedView) XXX_Size() int {
	return xxx_messageInfo_ResolvedView.Size(m)
}
func (m *ResolvedView) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedView.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedView proto.InternalMessageInfo

// ReservedMVTagSpec defines MVTags that cannot be used in this schema. This
// can be used to reserve tags for future materialized views or to tombstone
// deleted materialized views. Re-using materialized view tags requires careful
// consideration of previously used delta journals and shard recovery logs
// because the tag is an input for generating shard IDs in `factctl sync`.
type ReservedMVTagSpec struct {
	// Reserved tag in the same space as MaterializedView.
	Tag MVTag `protobuf:"varint,1,opt,name=tag,proto3,casttype=MVTag" json:"tag,omitempty"`
	// Longer, free-form description of the reserved MVTag.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *ReservedMVTagSpec) Reset()         { *m = ReservedMVTagSpec{} }
func (m *ReservedMVTagSpec) String() string { return proto.CompactTextString(m) }
func (*ReservedMVTagSpec) ProtoMessage()    {}
func (*ReservedMVTagSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{6}
}
func (m *ReservedMVTagSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReservedMVTagSpec.Unmarshal(m, b)
}
func (m *ReservedMVTagSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReservedMVTagSpec.Marshal(b, m, deterministic)
}
func (m *ReservedMVTagSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservedMVTagSpec.Merge(m, src)
}
func (m *ReservedMVTagSpec) XXX_Size() int {
	return xxx_messageInfo_ReservedMVTagSpec.Size(m)
}
func (m *ReservedMVTagSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservedMVTagSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ReservedMVTagSpec proto.InternalMessageInfo

// MaterializedViewSpec defines a materialization of a ViewSpec. Its Metrics
// are continuously aggregated as RelationRows are processed, and the total
// storage commitment is limited to the cardinality of the View Dimensions.
type MaterializedViewSpec struct {
	// Short, unique name of the MaterializedView.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Relation which this view materializes.
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	// View materialized by the MaterializedView.
	View ViewSpec `protobuf:"bytes,3,opt,name=view,proto3" json:"view"`
	// Longer, free-form description of the MaterializedView.
	Desc      string                          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Retention *MaterializedViewSpec_Retention `protobuf:"bytes,5,opt,name=retention,proto3" json:"retention,omitempty"`
	// Unique tag of the MaterializedView.
	Tag MVTag `protobuf:"varint,6,opt,name=tag,proto3,casttype=MVTag" json:"tag,omitempty"`
	// Resolved RelTag. Immutable.
	RelTag RelTag `protobuf:"varint,7,opt,name=rel_tag,json=relTag,proto3,casttype=RelTag" json:"rel_tag,omitempty" yaml:",omitempty"`
	// Resolution of the View. Immutable.
	ResolvedView ResolvedView `protobuf:"bytes,8,opt,name=resolved_view,json=resolvedView,proto3" json:"resolved_view" yaml:",omitempty"`
}

func (m *MaterializedViewSpec) Reset()         { *m = MaterializedViewSpec{} }
func (m *MaterializedViewSpec) String() string { return proto.CompactTextString(m) }
func (*MaterializedViewSpec) ProtoMessage()    {}
func (*MaterializedViewSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{7}
}
func (m *MaterializedViewSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaterializedViewSpec.Unmarshal(m, b)
}
func (m *MaterializedViewSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaterializedViewSpec.Marshal(b, m, deterministic)
}
func (m *MaterializedViewSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterializedViewSpec.Merge(m, src)
}
func (m *MaterializedViewSpec) XXX_Size() int {
	return xxx_messageInfo_MaterializedViewSpec.Size(m)
}
func (m *MaterializedViewSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterializedViewSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MaterializedViewSpec proto.InternalMessageInfo

// Optional retention of MaterializedView rows.
type MaterializedViewSpec_Retention struct {
	// Duration after which a row is eligible for removal.
	RemoveAfter time.Duration `protobuf:"bytes,1,opt,name=remove_after,json=removeAfter,proto3,stdduration" json:"remove_after"`
	// Dimension, which must be part of the MaterializedView and of type
	// Timestamp, to which |remove_after| is added to determine the effective
	// removal horizon.
	RelativeTo string `protobuf:"bytes,2,opt,name=relative_to,json=relativeTo,proto3" json:"relative_to,omitempty"`
	// Resolved DimTag of |relative_to|.
	RelativeToTag DimTag `protobuf:"varint,3,opt,name=relative_to_tag,json=relativeToTag,proto3,casttype=DimTag" json:"relative_to_tag,omitempty" yaml:",omitempty"`
}

func (m *MaterializedViewSpec_Retention) Reset()         { *m = MaterializedViewSpec_Retention{} }
func (m *MaterializedViewSpec_Retention) String() string { return proto.CompactTextString(m) }
func (*MaterializedViewSpec_Retention) ProtoMessage()    {}
func (*MaterializedViewSpec_Retention) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{7, 0}
}
func (m *MaterializedViewSpec_Retention) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaterializedViewSpec_Retention.Unmarshal(m, b)
}
func (m *MaterializedViewSpec_Retention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaterializedViewSpec_Retention.Marshal(b, m, deterministic)
}
func (m *MaterializedViewSpec_Retention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterializedViewSpec_Retention.Merge(m, src)
}
func (m *MaterializedViewSpec_Retention) XXX_Size() int {
	return xxx_messageInfo_MaterializedViewSpec_Retention.Size(m)
}
func (m *MaterializedViewSpec_Retention) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterializedViewSpec_Retention.DiscardUnknown(m)
}

var xxx_messageInfo_MaterializedViewSpec_Retention proto.InternalMessageInfo

// QuerySpec describes a result which should be computed from a Relation.
// In particular it defines the "shape" (in Dimensions and Metrics) of the
// desired result, and any filters which should be applied.
type QuerySpec struct {
	// MaterializedView to query.
	MaterializedView string `protobuf:"bytes,2,opt,name=materialized_view,json=materializedView,proto3" json:"materialized_view,omitempty"`
	// View of the Query result.
	//
	// Dimensions of the Relation which should be grouped over and returned with
	// the Query result set. Other Dimensions included in the MaterializedView but
	// not included in the Query Shape are aggregated across.
	//
	// Where possible, use a strict ordered prefix of underlying MaterializedView
	// Dimensions. This is much more efficient to evaluate, as grouping can
	// utilize the natural index order, and no further recombining or sorting is
	// required. When using a prefix, the Query result set is incrementally
	// streamed as it is evaluated, and even extremely large result sets can be
	// queried efficiently.
	//
	// If Dimensions are not a strict prefix, the Query evaluator must perform
	// recombination and sorting steps, and results will be sent only after
	// all underlying view rows have been read. Implementations may also limit
	// the size of the result sets they will buffer, returning an error for
	// Queries which exceed it.
	View    ViewSpec           `protobuf:"bytes,3,opt,name=view,proto3" json:"view"`
	Filters []QuerySpec_Filter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters"`
}

func (m *QuerySpec) Reset()         { *m = QuerySpec{} }
func (m *QuerySpec) String() string { return proto.CompactTextString(m) }
func (*QuerySpec) ProtoMessage()    {}
func (*QuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{8}
}
func (m *QuerySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySpec.Unmarshal(m, b)
}
func (m *QuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySpec.Marshal(b, m, deterministic)
}
func (m *QuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec.Merge(m, src)
}
func (m *QuerySpec) XXX_Size() int {
	return xxx_messageInfo_QuerySpec.Size(m)
}
func (m *QuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec proto.InternalMessageInfo

// A Filter is a sequence of ordered non-overlapping ranges for a Dimension.
// Filters may be applied to any subset of MaterializedView Dimensions,
// including those not present in the Query View.
type QuerySpec_Filter struct {
	// Dimension to which the Filter is applied.
	Dimension string                    `protobuf:"bytes,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Ints      []QuerySpec_Filter_Int    `protobuf:"bytes,2,rep,name=ints,proto3" json:"ints"`
	Floats    []QuerySpec_Filter_Float  `protobuf:"bytes,3,rep,name=floats,proto3" json:"floats"`
	Strings   []QuerySpec_Filter_String `protobuf:"bytes,4,rep,name=strings,proto3" json:"strings"`
	Times     []QuerySpec_Filter_Time   `protobuf:"bytes,5,rep,name=times,proto3" json:"times"`
}

func (m *QuerySpec_Filter) Reset()         { *m = QuerySpec_Filter{} }
func (m *QuerySpec_Filter) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter) ProtoMessage()    {}
func (*QuerySpec_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{8, 0}
}
func (m *QuerySpec_Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySpec_Filter.Unmarshal(m, b)
}
func (m *QuerySpec_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySpec_Filter.Marshal(b, m, deterministic)
}
func (m *QuerySpec_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter.Merge(m, src)
}
func (m *QuerySpec_Filter) XXX_Size() int {
	return xxx_messageInfo_QuerySpec_Filter.Size(m)
}
func (m *QuerySpec_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter proto.InternalMessageInfo

type QuerySpec_Filter_Int struct {
	Begin int64 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *QuerySpec_Filter_Int) Reset()         { *m = QuerySpec_Filter_Int{} }
func (m *QuerySpec_Filter_Int) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter_Int) ProtoMessage()    {}
func (*QuerySpec_Filter_Int) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{8, 0, 0}
}
func (m *QuerySpec_Filter_Int) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySpec_Filter_Int.Unmarshal(m, b)
}
func (m *QuerySpec_Filter_Int) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySpec_Filter_Int.Marshal(b, m, deterministic)
}
func (m *QuerySpec_Filter_Int) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter_Int.Merge(m, src)
}
func (m *QuerySpec_Filter_Int) XXX_Size() int {
	return xxx_messageInfo_QuerySpec_Filter_Int.Size(m)
}
func (m *QuerySpec_Filter_Int) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter_Int.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter_Int proto.InternalMessageInfo

type QuerySpec_Filter_Float struct {
	Begin float64 `protobuf:"fixed64,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   float64 `protobuf:"fixed64,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *QuerySpec_Filter_Float) Reset()         { *m = QuerySpec_Filter_Float{} }
func (m *QuerySpec_Filter_Float) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter_Float) ProtoMessage()    {}
func (*QuerySpec_Filter_Float) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{8, 0, 1}
}
func (m *QuerySpec_Filter_Float) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySpec_Filter_Float.Unmarshal(m, b)
}
func (m *QuerySpec_Filter_Float) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySpec_Filter_Float.Marshal(b, m, deterministic)
}
func (m *QuerySpec_Filter_Float) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter_Float.Merge(m, src)
}
func (m *QuerySpec_Filter_Float) XXX_Size() int {
	return xxx_messageInfo_QuerySpec_Filter_Float.Size(m)
}
func (m *QuerySpec_Filter_Float) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter_Float.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter_Float proto.InternalMessageInfo

type QuerySpec_Filter_String struct {
	Begin string `protobuf:"bytes,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *QuerySpec_Filter_String) Reset()         { *m = QuerySpec_Filter_String{} }
func (m *QuerySpec_Filter_String) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter_String) ProtoMessage()    {}
func (*QuerySpec_Filter_String) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{8, 0, 2}
}
func (m *QuerySpec_Filter_String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySpec_Filter_String.Unmarshal(m, b)
}
func (m *QuerySpec_Filter_String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySpec_Filter_String.Marshal(b, m, deterministic)
}
func (m *QuerySpec_Filter_String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter_String.Merge(m, src)
}
func (m *QuerySpec_Filter_String) XXX_Size() int {
	return xxx_messageInfo_QuerySpec_Filter_String.Size(m)
}
func (m *QuerySpec_Filter_String) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter_String.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter_String proto.InternalMessageInfo

type QuerySpec_Filter_Time struct {
	Begin         time.Time     `protobuf:"bytes,1,opt,name=begin,proto3,stdtime" json:"begin"`
	End           time.Time     `protobuf:"bytes,2,opt,name=end,proto3,stdtime" json:"end"`
	RelativeBegin time.Duration `protobuf:"bytes,3,opt,name=relative_begin,json=relativeBegin,proto3,stdduration" json:"relative_begin"`
	RelativeEnd   time.Duration `protobuf:"bytes,4,opt,name=relative_end,json=relativeEnd,proto3,stdduration" json:"relative_end"`
}

func (m *QuerySpec_Filter_Time) Reset()         { *m = QuerySpec_Filter_Time{} }
func (m *QuerySpec_Filter_Time) String() string { return proto.CompactTextString(m) }
func (*QuerySpec_Filter_Time) ProtoMessage()    {}
func (*QuerySpec_Filter_Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{8, 0, 3}
}
func (m *QuerySpec_Filter_Time) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySpec_Filter_Time.Unmarshal(m, b)
}
func (m *QuerySpec_Filter_Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySpec_Filter_Time.Marshal(b, m, deterministic)
}
func (m *QuerySpec_Filter_Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec_Filter_Time.Merge(m, src)
}
func (m *QuerySpec_Filter_Time) XXX_Size() int {
	return xxx_messageInfo_QuerySpec_Filter_Time.Size(m)
}
func (m *QuerySpec_Filter_Time) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec_Filter_Time.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec_Filter_Time proto.InternalMessageInfo

type ResolvedQuery struct {
	// Tag of the MaterializedViewSpec to be queried.
	MvTag MVTag `protobuf:"varint,1,opt,name=mv_tag,json=mvTag,proto3,casttype=MVTag" json:"mv_tag,omitempty"`
	// Shape of the query result.
	View    ResolvedView           `protobuf:"bytes,2,opt,name=view,proto3" json:"view"`
	Filters []ResolvedQuery_Filter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters"`
}

func (m *ResolvedQuery) Reset()         { *m = ResolvedQuery{} }
func (m *ResolvedQuery) String() string { return proto.CompactTextString(m) }
func (*ResolvedQuery) ProtoMessage()    {}
func (*ResolvedQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{9}
}
func (m *ResolvedQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolvedQuery.Unmarshal(m, b)
}
func (m *ResolvedQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolvedQuery.Marshal(b, m, deterministic)
}
func (m *ResolvedQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedQuery.Merge(m, src)
}
func (m *ResolvedQuery) XXX_Size() int {
	return xxx_messageInfo_ResolvedQuery.Size(m)
}
func (m *ResolvedQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedQuery proto.InternalMessageInfo

// Flattened filtered ranges over each view dimension.
type ResolvedQuery_Filter struct {
	// Dimension to which the Filter is applied.
	DimTag DimTag                       `protobuf:"varint,1,opt,name=dim_tag,json=dimTag,proto3,casttype=DimTag" json:"dim_tag,omitempty"`
	Ranges []ResolvedQuery_Filter_Range `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges"`
}

func (m *ResolvedQuery_Filter) Reset()         { *m = ResolvedQuery_Filter{} }
func (m *ResolvedQuery_Filter) String() string { return proto.CompactTextString(m) }
func (*ResolvedQuery_Filter) ProtoMessage()    {}
func (*ResolvedQuery_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{9, 0}
}
func (m *ResolvedQuery_Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolvedQuery_Filter.Unmarshal(m, b)
}
func (m *ResolvedQuery_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolvedQuery_Filter.Marshal(b, m, deterministic)
}
func (m *ResolvedQuery_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedQuery_Filter.Merge(m, src)
}
func (m *ResolvedQuery_Filter) XXX_Size() int {
	return xxx_messageInfo_ResolvedQuery_Filter.Size(m)
}
func (m *ResolvedQuery_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedQuery_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedQuery_Filter proto.InternalMessageInfo

// Flattened allowed byte ranges of the Dimension.
type ResolvedQuery_Filter_Range struct {
	Begin []byte `protobuf:"bytes,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   []byte `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *ResolvedQuery_Filter_Range) Reset()         { *m = ResolvedQuery_Filter_Range{} }
func (m *ResolvedQuery_Filter_Range) String() string { return proto.CompactTextString(m) }
func (*ResolvedQuery_Filter_Range) ProtoMessage()    {}
func (*ResolvedQuery_Filter_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{9, 0, 0}
}
func (m *ResolvedQuery_Filter_Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolvedQuery_Filter_Range.Unmarshal(m, b)
}
func (m *ResolvedQuery_Filter_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolvedQuery_Filter_Range.Marshal(b, m, deterministic)
}
func (m *ResolvedQuery_Filter_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedQuery_Filter_Range.Merge(m, src)
}
func (m *ResolvedQuery_Filter_Range) XXX_Size() int {
	return xxx_messageInfo_ResolvedQuery_Filter_Range.Size(m)
}
func (m *ResolvedQuery_Filter_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedQuery_Filter_Range.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedQuery_Filter_Range proto.InternalMessageInfo

type ExecuteQueryRequest struct {
	// Header attached by a proxy-ing peer. Not directly set by clients.
	Header *protocol.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Shard to query. Set iff |header| is also set
	// TODO (chris): if this is go.gazette.dev/core/consumer.ShardID instead of a string
	// the .pb.go file is not valid.
	Shard go_gazette_dev_core_consumer_protocol.ShardID `protobuf:"bytes,2,opt,name=shard,proto3,casttype=go.gazette.dev/core/consumer/protocol.ShardID" json:"shard,omitempty"`
	// Query specification.
	Query ResolvedQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query"`
}

func (m *ExecuteQueryRequest) Reset()         { *m = ExecuteQueryRequest{} }
func (m *ExecuteQueryRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteQueryRequest) ProtoMessage()    {}
func (*ExecuteQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{10}
}
func (m *ExecuteQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteQueryRequest.Unmarshal(m, b)
}
func (m *ExecuteQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteQueryRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteQueryRequest.Merge(m, src)
}
func (m *ExecuteQueryRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteQueryRequest.Size(m)
}
func (m *ExecuteQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteQueryRequest proto.InternalMessageInfo

type QueryResponse struct {
	// Response header. Set on the first QueryResponse only.
	Header *protocol.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Encoded table rows.
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{11}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

// SchemaSpec defines a set of Relations and their Mappings, Dimensions, Metrics,
// and MaterializedViews. The complete Schema must be referentially consistent:
// any Mapping, Dimension or Metric used in a Relation or MaterializedView must
// be defined. Similarly, Dimensions referenced from Metrics must be defined,
// and of the proper associated type.
type SchemaSpec struct {
	Mappings         []MappingSpec          `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings"`
	Dimensions       []DimensionSpec        `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions"`
	Metrics          []MetricSpec           `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics"`
	Relations        []RelationSpec         `protobuf:"bytes,4,rep,name=relations,proto3" json:"relations"`
	Views            []MaterializedViewSpec `protobuf:"bytes,5,rep,name=views,proto3" json:"views"`
	ReservedViewTags []ReservedMVTagSpec    `protobuf:"bytes,6,rep,name=reserved_view_tags,json=reservedViewTags,proto3" json:"reserved_view_tags"`
}

func (m *SchemaSpec) Reset()         { *m = SchemaSpec{} }
func (m *SchemaSpec) String() string { return proto.CompactTextString(m) }
func (*SchemaSpec) ProtoMessage()    {}
func (*SchemaSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{12}
}
func (m *SchemaSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaSpec.Unmarshal(m, b)
}
func (m *SchemaSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaSpec.Marshal(b, m, deterministic)
}
func (m *SchemaSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaSpec.Merge(m, src)
}
func (m *SchemaSpec) XXX_Size() int {
	return xxx_messageInfo_SchemaSpec.Size(m)
}
func (m *SchemaSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaSpec proto.InternalMessageInfo

// GetSchemaResponse is the response of the GetSchema RPC.
type GetSchemaResponse struct {
	// Name of this Factable release instance.
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	// ModRevision of the current SchemaSpec
	ModRevision int64 `protobuf:"varint,1,opt,name=mod_revision,json=modRevision,proto3" json:"mod_revision,omitempty"`
	// Current value of the SchemaSpec. Zero-valued if |mod_revision| is zero.
	Spec SchemaSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec"`
	// LabelSelector over Extractor output / VTable input "delta" partitions.
	DeltaPartitions protocol.LabelSelector `protobuf:"bytes,4,opt,name=delta_partitions,json=deltaPartitions,proto3" json:"delta_partitions"`
}

func (m *GetSchemaResponse) Reset()         { *m = GetSchemaResponse{} }
func (m *GetSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*GetSchemaResponse) ProtoMessage()    {}
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{13}
}
func (m *GetSchemaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSchemaResponse.Unmarshal(m, b)
}
func (m *GetSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSchemaResponse.Marshal(b, m, deterministic)
}
func (m *GetSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSchemaResponse.Merge(m, src)
}
func (m *GetSchemaResponse) XXX_Size() int {
	return xxx_messageInfo_GetSchemaResponse.Size(m)
}
func (m *GetSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSchemaResponse proto.InternalMessageInfo

// UpdateSchemaRequest is the request of the UpdateSchema RPC.
type UpdateSchemaRequest struct {
	// Expected Name of the Factable release instance.
	ExpectInstance string `protobuf:"bytes,1,opt,name=expect_instance,json=expectInstance,proto3" json:"expect_instance,omitempty"`
	// Expected ModRevision of the current SchemaSpec. Zero if the SchemaSpec
	// is being created for the first time.
	ExpectModRevision int64 `protobuf:"varint,2,opt,name=expect_mod_revision,json=expectModRevision,proto3" json:"expect_mod_revision,omitempty"`
	// Updated SchemaSpec to apply.
	Update SchemaSpec `protobuf:"bytes,3,opt,name=update,proto3" json:"update"`
}

func (m *UpdateSchemaRequest) Reset()         { *m = UpdateSchemaRequest{} }
func (m *UpdateSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSchemaRequest) ProtoMessage()    {}
func (*UpdateSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cf26f69bbb4fd9d, []int{14}
}
func (m *UpdateSchemaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSchemaRequest.Unmarshal(m, b)
}
func (m *UpdateSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSchemaRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSchemaRequest.Merge(m, src)
}
func (m *UpdateSchemaRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSchemaRequest.Size(m)
}
func (m *UpdateSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSchemaRequest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("factable.DimensionType", DimensionType_name, DimensionType_value)
	proto.RegisterEnum("factable.MetricType", MetricType_name, MetricType_value)
	proto.RegisterType((*MappingSpec)(nil), "factable.MappingSpec")
	proto.RegisterType((*DimensionSpec)(nil), "factable.DimensionSpec")
	proto.RegisterType((*MetricSpec)(nil), "factable.MetricSpec")
	proto.RegisterType((*RelationSpec)(nil), "factable.RelationSpec")
	proto.RegisterType((*ViewSpec)(nil), "factable.ViewSpec")
	proto.RegisterType((*ResolvedView)(nil), "factable.ResolvedView")
	proto.RegisterType((*ReservedMVTagSpec)(nil), "factable.ReservedMVTagSpec")
	proto.RegisterType((*MaterializedViewSpec)(nil), "factable.MaterializedViewSpec")
	proto.RegisterType((*MaterializedViewSpec_Retention)(nil), "factable.MaterializedViewSpec.Retention")
	proto.RegisterType((*QuerySpec)(nil), "factable.QuerySpec")
	proto.RegisterType((*QuerySpec_Filter)(nil), "factable.QuerySpec.Filter")
	proto.RegisterType((*QuerySpec_Filter_Int)(nil), "factable.QuerySpec.Filter.Int")
	proto.RegisterType((*QuerySpec_Filter_Float)(nil), "factable.QuerySpec.Filter.Float")
	proto.RegisterType((*QuerySpec_Filter_String)(nil), "factable.QuerySpec.Filter.String")
	proto.RegisterType((*QuerySpec_Filter_Time)(nil), "factable.QuerySpec.Filter.Time")
	proto.RegisterType((*ResolvedQuery)(nil), "factable.ResolvedQuery")
	proto.RegisterType((*ResolvedQuery_Filter)(nil), "factable.ResolvedQuery.Filter")
	proto.RegisterType((*ResolvedQuery_Filter_Range)(nil), "factable.ResolvedQuery.Filter.Range")
	proto.RegisterType((*ExecuteQueryRequest)(nil), "factable.ExecuteQueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "factable.QueryResponse")
	proto.RegisterType((*SchemaSpec)(nil), "factable.SchemaSpec")
	proto.RegisterType((*GetSchemaResponse)(nil), "factable.GetSchemaResponse")
	proto.RegisterType((*UpdateSchemaRequest)(nil), "factable.UpdateSchemaRequest")
}

func init() { proto.RegisterFile("pkg/factable/factable.proto", fileDescriptor_8cf26f69bbb4fd9d) }

var fileDescriptor_8cf26f69bbb4fd9d = []byte{
	// 1706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xbb, 0x73, 0x1b, 0x5d,
	0x15, 0xf7, 0x6a, 0x57, 0x2b, 0xe9, 0x48, 0x76, 0xd6, 0xd7, 0xe6, 0xb3, 0x3e, 0x25, 0x48, 0x8e,
	0x80, 0xc1, 0x93, 0x87, 0x1c, 0x14, 0x06, 0x82, 0x81, 0x0c, 0x16, 0x92, 0x6d, 0x65, 0xac, 0x24,
	0xac, 0x14, 0x33, 0x54, 0x9a, 0xb5, 0x74, 0xad, 0xec, 0x44, 0xfb, 0xc8, 0xee, 0xb5, 0x12, 0xa7,
	0x84, 0x1e, 0x42, 0x47, 0x99, 0xc9, 0xff, 0x91, 0x49, 0x41, 0x93, 0x82, 0x82, 0x82, 0x82, 0xca,
	0x0c, 0xe3, 0x9e, 0x82, 0x32, 0xd5, 0x37, 0xf7, 0xb5, 0xbb, 0xb2, 0x25, 0xc7, 0x69, 0xa4, 0xfb,
	0x38, 0xbf, 0xf3, 0x3e, 0xe7, 0x9e, 0x85, 0xeb, 0xfe, 0x8b, 0xd1, 0xe6, 0x91, 0x35, 0x20, 0xd6,
	0xe1, 0x18, 0x47, 0x8b, 0x9a, 0x1f, 0x78, 0xc4, 0x43, 0x59, 0xb9, 0x2f, 0xad, 0x8e, 0xbc, 0x91,
	0xc7, 0x0e, 0x37, 0xe9, 0x8a, 0xdf, 0x97, 0xca, 0x87, 0x81, 0xf7, 0x02, 0x07, 0x9b, 0x6c, 0x37,
	0xf0, 0xc6, 0xd1, 0x42, 0xde, 0xfb, 0xe4, 0xc4, 0xc7, 0xe1, 0xe6, 0xf0, 0x38, 0xb0, 0x88, 0xed,
	0xb9, 0xd1, 0x42, 0xdc, 0xaf, 0x8b, 0x7b, 0x62, 0x3b, 0x38, 0x24, 0x96, 0xe3, 0xc7, 0x2b, 0x41,
	0x51, 0x14, 0x14, 0xd8, 0xf1, 0xc9, 0x09, 0xff, 0xe5, 0x37, 0xd5, 0x2e, 0xe4, 0x3b, 0x96, 0xef,
	0xdb, 0xee, 0xa8, 0xeb, 0xe3, 0x01, 0x42, 0xa0, 0xb9, 0x96, 0x83, 0x8b, 0xca, 0xba, 0xb2, 0x91,
	0x33, 0xd9, 0x9a, 0x9e, 0x0d, 0x71, 0x38, 0x28, 0xa6, 0xf8, 0x19, 0x5d, 0xa3, 0x1b, 0xa0, 0x12,
	0x6b, 0x54, 0x54, 0xd7, 0x95, 0x0d, 0xad, 0x01, 0x9f, 0x4f, 0x2b, 0x7a, 0xc7, 0xf2, 0x7b, 0xd6,
	0xc8, 0xa4, 0xc7, 0xd5, 0x3f, 0x2a, 0xb0, 0xd8, 0xb4, 0x1d, 0xec, 0x86, 0xb6, 0xe7, 0xce, 0xe5,
	0x7b, 0x1b, 0x34, 0xaa, 0x15, 0xe3, 0xbb, 0x54, 0x5f, 0xab, 0x45, 0x5e, 0x8b, 0xa0, 0xbd, 0x13,
	0x1f, 0x9b, 0x8c, 0x28, 0x52, 0x42, 0xbd, 0xa8, 0x84, 0x16, 0x2b, 0xd1, 0xb4, 0x9d, 0x48, 0x89,
	0x7f, 0x29, 0x00, 0x1d, 0x4c, 0x02, 0x7b, 0x30, 0x57, 0x83, 0x1b, 0x90, 0x1b, 0x4a, 0x59, 0xc2,
	0xbc, 0xf8, 0x00, 0x6d, 0x08, 0xfd, 0x54, 0xa6, 0xdf, 0x6a, 0xac, 0x1f, 0xe7, 0x3a, 0x43, 0x39,
	0xed, 0xa2, 0x72, 0xe9, 0x84, 0x87, 0x30, 0x91, 0xca, 0xa1, 0x07, 0x90, 0x19, 0xda, 0x4e, 0x9f,
	0x52, 0xe8, 0x8c, 0xa2, 0xf2, 0xff, 0xd3, 0xca, 0xf2, 0x89, 0xe5, 0x8c, 0xb7, 0xaa, 0x77, 0x3c,
	0xc7, 0x26, 0x2c, 0x46, 0xd5, 0x84, 0x4d, 0xfa, 0x90, 0xfd, 0x57, 0x3f, 0xa6, 0xa0, 0x60, 0xe2,
	0x31, 0x8b, 0xff, 0x5c, 0xc3, 0x7e, 0x01, 0xd9, 0x10, 0x8f, 0xf1, 0x80, 0x78, 0x01, 0xb3, 0x2b,
	0x5f, 0x5f, 0xab, 0x45, 0x49, 0xb5, 0x6f, 0x1d, 0xe2, 0x71, 0x57, 0x5c, 0x37, 0xb4, 0x4f, 0xa7,
	0x95, 0x05, 0x33, 0x22, 0x47, 0x45, 0xc8, 0x38, 0x3c, 0x21, 0x84, 0xaf, 0xe5, 0x16, 0x95, 0x01,
	0x22, 0xe7, 0x84, 0x45, 0x6d, 0x5d, 0xdd, 0xc8, 0x99, 0x89, 0x93, 0xc8, 0x0b, 0xe9, 0x8b, 0x5e,
	0xd0, 0x63, 0x2f, 0x98, 0x78, 0x9c, 0xf4, 0x82, 0x63, 0xf9, 0xcc, 0x0b, 0x99, 0x2f, 0x78, 0x41,
	0xa4, 0x97, 0xee, 0xb0, 0x7f, 0xb4, 0x05, 0x59, 0xe1, 0xbf, 0xb0, 0x98, 0x5d, 0x57, 0xaf, 0xe2,
	0xc0, 0x0c, 0x77, 0x60, 0x58, 0x6d, 0x42, 0xf6, 0xc0, 0xc6, 0xaf, 0x98, 0xf3, 0xa6, 0x6d, 0x52,
	0x2e, 0xd8, 0x44, 0xbd, 0xc1, 0xa2, 0x1d, 0x16, 0x53, 0xec, 0x52, 0x6e, 0xab, 0x87, 0x34, 0x0c,
	0xa1, 0x37, 0x9e, 0xe0, 0x21, 0xe5, 0x86, 0x7e, 0x94, 0xd0, 0x48, 0x61, 0x1a, 0xc1, 0x0c, 0xe1,
	0x94, 0xcc, 0xc1, 0x84, 0x93, 0xa5, 0x62, 0x32, 0x91, 0x1b, 0x94, 0x3b, 0x25, 0xdb, 0xd2, 0xde,
	0xbd, 0xab, 0x28, 0xd5, 0x26, 0x2c, 0x9b, 0x38, 0xc4, 0xc1, 0x04, 0x0f, 0x3b, 0x07, 0x3d, 0x8b,
	0x97, 0xe8, 0x75, 0xee, 0x52, 0x85, 0x39, 0x2c, 0xf7, 0xf9, 0xb4, 0x92, 0x66, 0x77, 0xdc, 0xa3,
	0x33, 0x6a, 0xb5, 0xfa, 0x51, 0x83, 0xd5, 0x8e, 0x45, 0x70, 0x60, 0x5b, 0x63, 0xfb, 0x0d, 0x57,
	0x77, 0x6e, 0xe6, 0x94, 0x20, 0x1b, 0x88, 0xec, 0x12, 0x4c, 0xa2, 0x3d, 0xba, 0x03, 0xda, 0xc4,
	0xc6, 0xaf, 0x58, 0x5e, 0xe4, 0xeb, 0x28, 0x2e, 0x08, 0xc9, 0x51, 0x24, 0x13, 0xa3, 0x9a, 0x59,
	0x14, 0x3b, 0x90, 0x0b, 0x30, 0xc1, 0x2e, 0x63, 0x9f, 0x66, 0x6c, 0x36, 0x12, 0x75, 0x35, 0x43,
	0xc9, 0x9a, 0x29, 0xe9, 0xcd, 0x18, 0x2a, 0x7d, 0xa0, 0xcf, 0xf4, 0xc1, 0x03, 0xc8, 0x04, 0x78,
	0x7c, 0xa5, 0xac, 0x12, 0xc9, 0xa8, 0x07, 0xec, 0x1f, 0x1d, 0xc0, 0x62, 0x20, 0x62, 0xda, 0x67,
	0x96, 0x66, 0x99, 0x8a, 0xdf, 0xc4, 0x2a, 0x26, 0x43, 0xde, 0xf8, 0x96, 0x5a, 0x3b, 0x93, 0xb7,
	0x59, 0x08, 0x12, 0x84, 0xa5, 0x0f, 0x0a, 0xe4, 0x22, 0x3b, 0xd0, 0x0e, 0x14, 0x02, 0xec, 0x78,
	0x13, 0xdc, 0xb7, 0x8e, 0x08, 0x0e, 0x98, 0xfb, 0xf3, 0xf5, 0x6f, 0x6b, 0x23, 0xcf, 0x1b, 0xc9,
	0x37, 0xe3, 0xf0, 0xf8, 0xa8, 0xd6, 0x14, 0x5d, 0xbe, 0x91, 0xa5, 0x72, 0xfe, 0xf6, 0x9f, 0x8a,
	0x62, 0xe6, 0x39, 0x70, 0x9b, 0xe2, 0x50, 0x05, 0xf2, 0x3c, 0x34, 0x13, 0xdc, 0x27, 0x9e, 0x88,
	0x16, 0xc8, 0xa3, 0x9e, 0x87, 0x76, 0xe1, 0x5a, 0x82, 0xa0, 0x1f, 0x37, 0xec, 0x2f, 0xd6, 0xca,
	0x62, 0xcc, 0x85, 0xf6, 0x9c, 0xff, 0xe9, 0x90, 0xfb, 0xdd, 0x31, 0x0e, 0x4e, 0x58, 0xda, 0xdc,
	0x86, 0x65, 0x27, 0x11, 0x29, 0xee, 0x29, 0x2e, 0xdd, 0x70, 0xce, 0x85, 0xf0, 0x2b, 0x73, 0x66,
	0x0b, 0x32, 0x47, 0xf6, 0x98, 0xe0, 0x80, 0xf7, 0x97, 0x7c, 0xbd, 0x14, 0x03, 0x22, 0x05, 0x6a,
	0x3b, 0x8c, 0x44, 0x00, 0x25, 0xa0, 0xf4, 0xf7, 0x34, 0xe8, 0xfc, 0x66, 0xba, 0xaf, 0x2b, 0xe7,
	0xfb, 0xfa, 0x03, 0xd0, 0x6c, 0x97, 0xf0, 0xf2, 0xcb, 0xd7, 0xcb, 0xf3, 0x25, 0xd4, 0xda, 0x2e,
	0x91, 0xea, 0x51, 0x04, 0x7a, 0x08, 0xfa, 0xd1, 0xd8, 0xb3, 0x48, 0x58, 0x54, 0x19, 0x76, 0xfd,
	0x12, 0xec, 0x0e, 0x25, 0x14, 0x68, 0x81, 0x42, 0xdb, 0x90, 0x09, 0x49, 0x60, 0xbb, 0x23, 0x69,
	0xde, 0xcd, 0x4b, 0x18, 0x74, 0x19, 0xa5, 0xb4, 0x52, 0xe0, 0xd0, 0x2f, 0x21, 0xcd, 0x1e, 0xf7,
	0x62, 0x9a, 0x31, 0xa8, 0x5c, 0xc2, 0xa0, 0x67, 0x3b, 0x58, 0xc0, 0x39, 0xa6, 0x74, 0x17, 0xd4,
	0xb6, 0x4b, 0xd0, 0x2a, 0xa4, 0x0f, 0xf1, 0xc8, 0xe6, 0xae, 0x51, 0x4d, 0xbe, 0x41, 0x06, 0xa8,
	0xd8, 0x1d, 0xb2, 0x40, 0xaa, 0x26, 0x5d, 0x96, 0x36, 0x21, 0xcd, 0xac, 0x98, 0x06, 0x28, 0x33,
	0x00, 0x0a, 0x07, 0xdc, 0x03, 0x9d, 0x6b, 0x3d, 0x8d, 0xc8, 0xcd, 0x40, 0xe4, 0x38, 0xe2, 0xcf,
	0x29, 0xd0, 0xa8, 0x9e, 0x68, 0x2b, 0x09, 0xa0, 0x71, 0x3f, 0x5f, 0x0d, 0x3d, 0x39, 0xd2, 0xf0,
	0x72, 0x78, 0x4b, 0xcb, 0x41, 0xb0, 0xfd, 0x59, 0xcc, 0xf6, 0xaa, 0x48, 0x0a, 0x40, 0x8f, 0x60,
	0x29, 0xaa, 0x0f, 0x2e, 0x5c, 0xbd, 0x7a, 0x29, 0x46, 0x25, 0xd2, 0x60, 0x3a, 0xb0, 0xa2, 0x16,
	0xbc, 0xa8, 0x32, 0xda, 0x57, 0x15, 0x35, 0x07, 0xb6, 0xdc, 0xe1, 0x23, 0x2d, 0xab, 0x18, 0xa9,
	0xea, 0xa7, 0x14, 0x2c, 0xca, 0x56, 0xc3, 0xe2, 0x8a, 0xd6, 0x41, 0x77, 0x26, 0xfd, 0x99, 0x8d,
	0x3f, 0xed, 0x4c, 0x68, 0xf3, 0xba, 0x27, 0x2a, 0x2d, 0x75, 0x69, 0xcf, 0x4a, 0x56, 0xdb, 0xc3,
	0xb8, 0xda, 0xd4, 0xf3, 0xb5, 0x30, 0x25, 0x7d, 0x4e, 0xc5, 0xbd, 0x57, 0xa2, 0x8a, 0xfb, 0x41,
	0x3c, 0xcf, 0xb0, 0xa4, 0x9a, 0x7a, 0xfc, 0xc4, 0xe8, 0x82, 0x1a, 0xa0, 0x07, 0x96, 0x3b, 0xc2,
	0xb2, 0xf4, 0x7e, 0x78, 0xb9, 0xb8, 0x9a, 0x49, 0x89, 0x65, 0x09, 0x71, 0x24, 0xcd, 0x49, 0x76,
	0x3c, 0x9d, 0x61, 0x85, 0x19, 0x19, 0x56, 0x60, 0x41, 0xae, 0x7e, 0x50, 0x60, 0xa5, 0xf5, 0x1a,
	0x0f, 0x8e, 0x09, 0x66, 0xcc, 0x4d, 0xfc, 0xf2, 0x18, 0x87, 0x04, 0x6d, 0x80, 0xfe, 0x1c, 0x5b,
	0xc3, 0xa8, 0xff, 0x1a, 0xf1, 0x80, 0xb4, 0xc7, 0xce, 0x4d, 0x71, 0x8f, 0x76, 0x21, 0x1d, 0x3e,
	0xb7, 0x02, 0x91, 0xb7, 0x8d, 0x9f, 0x7c, 0x3e, 0xad, 0xdc, 0x1d, 0x79, 0xb5, 0x91, 0xf5, 0x06,
	0x13, 0x82, 0x6b, 0x43, 0x3c, 0xd9, 0x1c, 0x78, 0x01, 0xde, 0x1c, 0x78, 0x6e, 0x78, 0xec, 0x24,
	0xe6, 0xf8, 0x5a, 0x97, 0xc2, 0xda, 0x4d, 0x93, 0xe3, 0xd1, 0x7d, 0x48, 0xbf, 0xa4, 0x2a, 0x88,
	0x34, 0x5b, 0x9b, 0x63, 0xbe, 0xac, 0x59, 0x46, 0x5b, 0xed, 0xc2, 0xa2, 0xd0, 0x3b, 0xf4, 0x3d,
	0x37, 0xc4, 0x5f, 0xa1, 0x78, 0x11, 0x32, 0x03, 0xcf, 0xa5, 0xcf, 0x8e, 0x70, 0x88, 0xdc, 0x56,
	0xff, 0xa4, 0x02, 0x74, 0x07, 0xcf, 0xb1, 0x63, 0xb1, 0x8e, 0xfe, 0x73, 0xc8, 0x8a, 0x21, 0x8f,
	0xcf, 0x2e, 0xf9, 0xfa, 0xf7, 0x92, 0xaf, 0x72, 0xf4, 0x79, 0x20, 0x87, 0x45, 0x49, 0x8c, 0x7e,
	0x3d, 0x35, 0x3e, 0xf1, 0xa8, 0xce, 0x1a, 0xe4, 0x13, 0xe0, 0xe4, 0x74, 0xf5, 0xd3, 0x78, 0xba,
	0xe2, 0x09, 0x78, 0x61, 0xc8, 0x4e, 0x00, 0x25, 0x29, 0xda, 0xa2, 0x43, 0x04, 0x1f, 0x49, 0x64,
	0x1f, 0x9d, 0xca, 0xf6, 0x78, 0x36, 0x16, 0xc8, 0x98, 0x9c, 0xb6, 0x19, 0x9a, 0xfa, 0xb2, 0x7d,
	0x96, 0x2f, 0x1f, 0x3e, 0x64, 0x24, 0x18, 0x04, 0x3d, 0x01, 0x14, 0x88, 0x69, 0x8c, 0xbd, 0x79,
	0x7c, 0x88, 0xd3, 0x19, 0xa3, 0xeb, 0x53, 0xb1, 0x9c, 0x9e, 0xd8, 0x04, 0x17, 0x43, 0x82, 0x29,
	0x77, 0x36, 0x88, 0xfe, 0x43, 0x81, 0xe5, 0x5d, 0x4c, 0x78, 0x20, 0xa2, 0xf8, 0x96, 0x20, 0x6b,
	0xbb, 0x21, 0xb1, 0xdc, 0x01, 0x16, 0x13, 0x78, 0xb4, 0x47, 0x37, 0xa1, 0xe0, 0x78, 0xc3, 0x7e,
	0x80, 0x27, 0x76, 0xf4, 0xb6, 0xa9, 0x66, 0xde, 0xf1, 0x86, 0xa6, 0x38, 0x42, 0x35, 0xd0, 0x42,
	0x1f, 0x0f, 0x44, 0x1b, 0x48, 0x38, 0x34, 0x8e, 0xb7, 0x6c, 0x02, 0x94, 0x0e, 0xed, 0x81, 0x31,
	0xc4, 0x63, 0x62, 0xf5, 0x7d, 0x2b, 0x20, 0xb6, 0x74, 0xea, 0x15, 0x3e, 0x19, 0xae, 0x31, 0xd8,
	0xd3, 0x08, 0x55, 0x7d, 0xaf, 0xc0, 0xca, 0x33, 0x7f, 0x68, 0x11, 0x2c, 0x2d, 0xe2, 0x95, 0xf6,
	0x63, 0xb8, 0x86, 0x5f, 0xfb, 0x78, 0x40, 0xfa, 0x91, 0x5d, 0xfc, 0x55, 0x58, 0xe2, 0xc7, 0x6d,
	0x69, 0x5d, 0x0d, 0x56, 0x04, 0xe1, 0x94, 0x91, 0xfc, 0x45, 0x5a, 0xe6, 0x57, 0x9d, 0x84, 0xa9,
	0x75, 0xd0, 0x8f, 0x99, 0x3c, 0x51, 0x50, 0x97, 0x19, 0x2b, 0x28, 0x6f, 0xfd, 0x3e, 0xf1, 0x65,
	0x4a, 0xbf, 0xe0, 0xd0, 0x2a, 0x18, 0xed, 0xc7, 0x07, 0xdb, 0xfb, 0xed, 0x66, 0xbf, 0xd9, 0xee,
	0xf4, 0x7b, 0x7f, 0x78, 0xda, 0x32, 0x16, 0x10, 0x80, 0x7e, 0xb0, 0x6d, 0xb6, 0x1f, 0xf7, 0x0c,
	0x05, 0xe5, 0x20, 0xbd, 0xb3, 0xff, 0x64, 0xbb, 0x67, 0xa8, 0xf4, 0xb8, 0xdb, 0x33, 0xdb, 0x8f,
	0x77, 0x0d, 0x0d, 0x2d, 0x42, 0xae, 0xd7, 0xee, 0xb4, 0xba, 0xbd, 0xed, 0xce, 0x53, 0x23, 0x7d,
	0xeb, 0x48, 0x7e, 0x6d, 0x32, 0xae, 0x6b, 0xb0, 0x22, 0xb9, 0x76, 0x5a, 0x3d, 0xb3, 0xfd, 0x5b,
	0xc9, 0x78, 0x09, 0x80, 0x33, 0xee, 0x77, 0x9f, 0x75, 0x0c, 0x05, 0x19, 0x50, 0x10, 0xfb, 0xdd,
	0xed, 0x67, 0xbb, 0x2d, 0x23, 0x45, 0xf9, 0x32, 0x71, 0x8c, 0x40, 0xa5, 0x00, 0x2e, 0xb2, 0xbf,
	0xb7, 0xbf, 0x6f, 0x68, 0xf5, 0xbf, 0x2a, 0xa0, 0x73, 0xeb, 0xd0, 0x6f, 0x20, 0x17, 0xa5, 0x0f,
	0xfa, 0xe6, 0xc2, 0x53, 0xd3, 0xa2, 0x53, 0x5d, 0x29, 0x91, 0x99, 0x17, 0x73, 0xad, 0x05, 0x85,
	0x64, 0xc4, 0xd0, 0xf7, 0x63, 0xe2, 0x19, 0x91, 0x2c, 0xcd, 0x91, 0x51, 0xff, 0x8b, 0x02, 0x69,
	0xfe, 0x4c, 0xfd, 0x2a, 0xfa, 0x2a, 0xe2, 0xfb, 0x95, 0x19, 0xf3, 0x49, 0x69, 0x5e, 0xe3, 0x43,
	0x7b, 0x50, 0x48, 0xb6, 0xea, 0xa4, 0x3a, 0x33, 0x5a, 0x78, 0x92, 0xcf, 0x54, 0x8b, 0xbc, 0xa7,
	0x34, 0x56, 0x3f, 0xfd, 0xb7, 0xbc, 0xf0, 0xf6, 0xac, 0xbc, 0xf0, 0xee, 0xac, 0xac, 0xfc, 0xf3,
	0xac, 0xbc, 0xf0, 0xef, 0xb3, 0xf2, 0xc2, 0xa1, 0xce, 0xf4, 0xbe, 0xff, 0x5d, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb1, 0xa2, 0x93, 0xde, 0xae, 0x11, 0x00, 0x00,
}

func (this *ResolvedView) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResolvedView)
	if !ok {
		that2, ok := that.(ResolvedView)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ResolvedView")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ResolvedView but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ResolvedView but is not nil && this == nil")
	}
	if len(this.DimTags) != len(that1.DimTags) {
		return fmt.Errorf("DimTags this(%v) Not Equal that(%v)", len(this.DimTags), len(that1.DimTags))
	}
	for i := range this.DimTags {
		if this.DimTags[i] != that1.DimTags[i] {
			return fmt.Errorf("DimTags this[%v](%v) Not Equal that[%v](%v)", i, this.DimTags[i], i, that1.DimTags[i])
		}
	}
	if len(this.MetTags) != len(that1.MetTags) {
		return fmt.Errorf("MetTags this(%v) Not Equal that(%v)", len(this.MetTags), len(that1.MetTags))
	}
	for i := range this.MetTags {
		if this.MetTags[i] != that1.MetTags[i] {
			return fmt.Errorf("MetTags this[%v](%v) Not Equal that[%v](%v)", i, this.MetTags[i], i, that1.MetTags[i])
		}
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchemaClient is the client API for Schema service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchemaClient interface {
	// GetSchema retrieves the current SchemaSpec.
	GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	// UpdateSchema updates the SchemaSpec to a new value.
	UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type schemaClient struct {
	cc *grpc.ClientConn
}

func NewSchemaClient(cc *grpc.ClientConn) SchemaClient {
	return &schemaClient{cc}
}

func (c *schemaClient) GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/factable.Schema/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/factable.Schema/UpdateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaServer is the server API for Schema service.
type SchemaServer interface {
	// GetSchema retrieves the current SchemaSpec.
	GetSchema(context.Context, *empty.Empty) (*GetSchemaResponse, error)
	// UpdateSchema updates the SchemaSpec to a new value.
	UpdateSchema(context.Context, *UpdateSchemaRequest) (*empty.Empty, error)
}

// UnimplementedSchemaServer can be embedded to have forward compatible implementations.
type UnimplementedSchemaServer struct {
}

func (*UnimplementedSchemaServer) GetSchema(ctx context.Context, req *empty.Empty) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedSchemaServer) UpdateSchema(ctx context.Context, req *UpdateSchemaRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchema not implemented")
}

func RegisterSchemaServer(s *grpc.Server, srv SchemaServer) {
	s.RegisterService(&_Schema_serviceDesc, srv)
}

func _Schema_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/factable.Schema/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).GetSchema(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_UpdateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).UpdateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/factable.Schema/UpdateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).UpdateSchema(ctx, req.(*UpdateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Schema_serviceDesc = grpc.ServiceDesc{
	ServiceName: "factable.Schema",
	HandlerType: (*SchemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchema",
			Handler:    _Schema_GetSchema_Handler,
		},
		{
			MethodName: "UpdateSchema",
			Handler:    _Schema_UpdateSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/factable/factable.proto",
}

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ResolveQuery maps a QuerySpec into a validated ResolvedQuery,
	// under the current server schema.
	ResolveQuery(ctx context.Context, in *QuerySpec, opts ...grpc.CallOption) (*ResolvedQuery, error)
	// ExecuteResolvedQuery against one or all Shards.
	ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (Query_ExecuteQueryClient, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ResolveQuery(ctx context.Context, in *QuerySpec, opts ...grpc.CallOption) (*ResolvedQuery, error) {
	out := new(ResolvedQuery)
	err := c.cc.Invoke(ctx, "/factable.Query/ResolveQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (Query_ExecuteQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[0], "/factable.Query/ExecuteQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryExecuteQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_ExecuteQueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type queryExecuteQueryClient struct {
	grpc.ClientStream
}

func (x *queryExecuteQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ResolveQuery maps a QuerySpec into a validated ResolvedQuery,
	// under the current server schema.
	ResolveQuery(context.Context, *QuerySpec) (*ResolvedQuery, error)
	// ExecuteResolvedQuery against one or all Shards.
	ExecuteQuery(*ExecuteQueryRequest, Query_ExecuteQueryServer) error
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ResolveQuery(ctx context.Context, req *QuerySpec) (*ResolvedQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveQuery not implemented")
}
func (*UnimplementedQueryServer) ExecuteQuery(req *ExecuteQueryRequest, srv Query_ExecuteQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ResolveQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResolveQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/factable.Query/ResolveQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResolveQuery(ctx, req.(*QuerySpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecuteQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).ExecuteQuery(m, &queryExecuteQueryServer{stream})
}

type Query_ExecuteQueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type queryExecuteQueryServer struct {
	grpc.ServerStream
}

func (x *queryExecuteQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "factable.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveQuery",
			Handler:    _Query_ResolveQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteQuery",
			Handler:       _Query_ExecuteQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/factable/factable.proto",
}

func (m *MappingSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	return n
}

func (m *DimensionSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFactable(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	return n
}

func (m *MetricSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Dimension)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFactable(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	if m.DimTag != 0 {
		n += 1 + sovFactable(uint64(m.DimTag))
	}
	return n
}

func (m *RelationSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = m.Selector.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	l = len(m.Mapping)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		for _, s := range m.Dimensions {
			l = len(s)
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	if m.MapTag != 0 {
		n += 1 + sovFactable(uint64(m.MapTag))
	}
	if len(m.DimTags) > 0 {
		l = 0
		for _, e := range m.DimTags {
			l += sovFactable(uint64(e))
		}
		n += 1 + sovFactable(uint64(l)) + l
	}
	return n
}

func (m *ViewSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, s := range m.Dimensions {
			l = len(s)
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for _, s := range m.Metrics {
			l = len(s)
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *ResolvedView) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DimTags) > 0 {
		l = 0
		for _, e := range m.DimTags {
			l += sovFactable(uint64(e))
		}
		n += 1 + sovFactable(uint64(l)) + l
	}
	if len(m.MetTags) > 0 {
		l = 0
		for _, e := range m.MetTags {
			l += sovFactable(uint64(e))
		}
		n += 1 + sovFactable(uint64(l)) + l
	}
	return n
}

func (m *ReservedMVTagSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	return n
}

func (m *MaterializedViewSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Relation)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = m.View.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Retention != nil {
		l = m.Retention.ProtoSize()
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFactable(uint64(m.Tag))
	}
	if m.RelTag != 0 {
		n += 1 + sovFactable(uint64(m.RelTag))
	}
	l = m.ResolvedView.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func (m *MaterializedViewSpec_Retention) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RemoveAfter)
	n += 1 + l + sovFactable(uint64(l))
	l = len(m.RelativeTo)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.RelativeToTag != 0 {
		n += 1 + sovFactable(uint64(m.RelativeToTag))
	}
	return n
}

func (m *QuerySpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MaterializedView)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = m.View.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *QuerySpec_Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dimension)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if len(m.Ints) > 0 {
		for _, e := range m.Ints {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Floats) > 0 {
		for _, e := range m.Floats {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Strings) > 0 {
		for _, e := range m.Strings {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Times) > 0 {
		for _, e := range m.Times {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *QuerySpec_Filter_Int) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 1 + sovFactable(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovFactable(uint64(m.End))
	}
	return n
}

func (m *QuerySpec_Filter_Float) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 9
	}
	if m.End != 0 {
		n += 9
	}
	return n
}

func (m *QuerySpec_Filter_String) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Begin)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	return n
}

func (m *QuerySpec_Filter_Time) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Begin)
	n += 1 + l + sovFactable(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.End)
	n += 1 + l + sovFactable(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RelativeBegin)
	n += 1 + l + sovFactable(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RelativeEnd)
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func (m *ResolvedQuery) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MvTag != 0 {
		n += 1 + sovFactable(uint64(m.MvTag))
	}
	l = m.View.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *ResolvedQuery_Filter) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DimTag != 0 {
		n += 1 + sovFactable(uint64(m.DimTag))
	}
	if len(m.Ranges) > 0 {
		for _, e := range m.Ranges {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *ResolvedQuery_Filter_Range) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Begin)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	return n
}

func (m *ExecuteQueryRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.ProtoSize()
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Shard)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	l = m.Query.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func (m *QueryResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.ProtoSize()
		n += 1 + l + sovFactable(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	return n
}

func (m *SchemaSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mappings) > 0 {
		for _, e := range m.Mappings {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Dimensions) > 0 {
		for _, e := range m.Dimensions {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.Views) > 0 {
		for _, e := range m.Views {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	if len(m.ReservedViewTags) > 0 {
		for _, e := range m.ReservedViewTags {
			l = e.ProtoSize()
			n += 1 + l + sovFactable(uint64(l))
		}
	}
	return n
}

func (m *GetSchemaResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.ModRevision != 0 {
		n += 1 + sovFactable(uint64(m.ModRevision))
	}
	l = m.Spec.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	l = m.DeltaPartitions.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func (m *UpdateSchemaRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExpectInstance)
	if l > 0 {
		n += 1 + l + sovFactable(uint64(l))
	}
	if m.ExpectModRevision != 0 {
		n += 1 + sovFactable(uint64(m.ExpectModRevision))
	}
	l = m.Update.ProtoSize()
	n += 1 + l + sovFactable(uint64(l))
	return n
}

func sovFactable(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFactable(x uint64) (n int) {
	return sovFactable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
